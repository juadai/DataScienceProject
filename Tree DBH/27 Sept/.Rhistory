barplot(tail(imp_gini$x, 15),
names.arg=tail(rownames(imp)[imp_gini$ix], 15),
horiz=T, main='15 most important variables: Gini')
barplot(tail(imp_gini$x, 15),
names.arg=tail(rownames(imp)[imp_gini$ix], 15),
horiz=T, main='15 most important variables: Gini',
cex.axis=0.5)
barplot(tail(imp_gini$x, 15),
names.arg=tail(rownames(imp)[imp_gini$ix], 15),
horiz=T, main='15 most important variables: Gini',
cex.names=0.5)
barplot(tail(imp_gini$x, 15),
names.arg=tail(rownames(imp)[imp_gini$ix], 15),
horiz=T, main='15 most important variables: Gini',
cex.names=0.8)
barplot(tail(imp_gini$x, 15),
names.arg=tail(rownames(imp)[imp_gini$ix], 15),
horiz=T, main='15 most important variables: Gini',
cex.names=0.85)
barplot(tail(imp_gini$x, 15),
names.arg=tail(rownames(imp)[imp_gini$ix], 15),
horiz=T, main='Gini: 15 most important variables',
cex.names=0.85)
imp <-
?importance
imp <-
?importance
?importance
imp <- importance(rf)
View(imp)
imp <- importance(rf, type=1)
View(imp)
View(imp)
imp <- importance(rf, type=2)
View(imp)
imp <- importance(rf, type=3)
imp <- importance(rf, type=1)
imp <- importance(rf, type=1)
rf <- randomForest(G~., data=train, ntree=which.min(rf$err.rate[,1]), importance=T)
imp <- importance(rf, type=1)
View(imp)
imp <- importance(rf)
imp_t2 <- importance(rf, type=2)
G_train_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtrainRain.txt'
G_test_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtestRain.txt'
train <- read.table(G_train_path, sep=',', header=T)
test <- read.table(G_test_path, sep=',', header=T)
train_X <- train[,1:365]
train_G <- train[,366]
test_X <- test[,1:365]
test_G <- test[,366]
train$G <- factor(train$G)
test$G <- factor(test$G)
rf <- randomForest(G~., data=train, ntree=3000)
which.min(rf$err.rate[,1])
plot(rf$err.rate[,1], type='l')
rf <- randomForest(G~., data=train, ntree=which.min(rf$err.rate[,1]), importance=T)
imp_t1 <- importance(rf, type=1)
imp_mean_dec <- sort(imp_t1, index.return=T)
imp_t2 <- importance(rf, type=2)
imp_gini <- sort(imp_t2, index.return=T)
barplot(tail(imp_gini$x, 15),
names.arg=tail(rownames(imp_t1)[imp_gini$ix], 15),
horiz=T, main='Mean Decrease: 15 most important variables',
cex.names=0.85)
barplot(tail(imp_gini$x, 15),
names.arg=tail(rownames(imp_t2)[imp_gini$ix], 15),
horiz=T, main='Gini: 15 most important variables',
cex.names=0.85)
barplot(tail(imp_gini$x, 15),
names.arg=tail(rownames(imp_t2)[imp_gini$ix], 15),
horiz=T, main='Gini: 15 most important variables',
cex.names=0.75)
barplot(tail(imp_gini$x, 15),
names.arg=tail(rownames(imp_t1)[imp_gini$ix], 15),
horiz=T, main='Mean Decrease: 15 most important variables',
cex.names=0.75)
View(imp_t1)
barplot(tail(imp_gini$x, 15),
names.arg=tail(rownames(imp_t1)[imp_gini$ix], 15),
horiz=T, main='Mean Decrease Accuracy: \n15 most important variables',
cex.names=0.75)
View(imp_t2)
barplot(tail(imp_gini$x, 15),
names.arg=tail(rownames(imp_t2)[imp_gini$ix], 15),
horiz=T, main='Mean Decrease Gini: \n15 most important variables',
cex.names=0.75)
imp_t1 <- importance(rf, type=1)
imp_mean_dec <- sort(imp_t1, index.return=T)
imp_t2 <- importance(rf, type=2)
imp_gini <- sort(imp_t2, index.return=T)
barplot(tail(imp_mean_dec$x, 15),
names.arg=tail(rownames(imp_t1)[imp_mean_dec$ix], 15),
horiz=T, main='Mean Decrease Accuracy: \n15 most important variables',
cex.names=0.75)
barplot(tail(imp_gini$x, 15),
names.arg=tail(rownames(imp_t2)[imp_gini$ix], 15),
horiz=T, main='Mean Decrease Gini: \n15 most important variables',
cex.names=0.75)
barplot(tail(imp_gini$x, 15),
names.arg=tail(rownames(imp_t2)[imp_gini$ix], 15),
horiz=T, main='Mean Decrease Gini: \n15 most important variables',
cex.names=0.75)
par(mfrow=c(2,1))
0.039231 - 0.028683 + 1.96*sqrt(0.007475^2 + 0.007962^2)
qnorm(0.0319)
qnorm(0)
pnorm(0)
pnorm(0.0319)
library(rstudioapi)
library(lme4)
library(lmerTest)
setwd(dirname(getActiveDocumentContext()$path))
df <- read.csv('../dataset/tables/abundance_species_for_analysis.csv')
unique(df['Life.Form'])
colnames(df)
#grouped <- aggregate(cbind(df$X0,df$X3,df$X6),
#                     list(df$Life.Form), FUN=sum)
#grouped <- grouped[order(grouped$V1, decreasing=T),]
#rownames(grouped) <- grouped$Group.1
df$Plot.Number <- factor(df$Plot.Number)
df$Treatment <- factor(df$Treatment)
df$Fenced <- df$Fenced=="True"
df$Gap <- df$Gap=="True"
# Remove rows with all abundance = 0
df <- df[!(df$X0 == 0 & df$X3 == 0 & df$X6 == 0),]
df_Y0 <- df[,c(1:7,8)]
df_Y0 <- cbind(df_Y0, 0)
colnames(df_Y0)[8:9] <- c("X", 'Year')
df_Y3 <- df[,c(1:7,9)]
df_Y3 <- cbind(df_Y3, 3)
colnames(df_Y3)[8:9] <- c("X", 'Year')
df_Y6 <- df[,c(1:7,10)]
df_Y6 <- cbind(df_Y6, 6)
colnames(df_Y6)[8:9] <- c("X", 'Year')
df_prime <- rbind(df_Y0,df_Y3,df_Y6)
df_prime$Year2 <- df_prime$Year^2
df_prime$log_X <- df_prime$X
df_prime[df_prime$X==0, 'log_X'] <- 0.1
df_prime$log_X <- log(df_prime$log_X)
# LF = Large Forb/herb
df_LF <- df_prime[df_prime$Life.Form=="Large Forb/Herb",]
LF_m1 <- lmer(X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_LF)
LF_m2 <- get_model(step(LF_m1))
summary(LF_m2)
# Exclude rows where abundance = 0
df_LF <- df_LF[df_LF$log_X >= 0,]
LF_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_LF)
LF_m4 <- get_model(step(LF_m3))
summary(LF_m4)
plot(LF_m4)
RSS <- sum((df_LF$log_X - fitted(LF_m4, df_LF))^2)
TSS <- sum((df_LF$log_X - mean(df_LF$log_X))^2)
R2 <- 1-RSS/TSS
R2
summary(LF_m4)
# MTG = Medium Tufted Grass
df_MTG <- df_prime[df_prime$Life.Form=="Medium Tufted grass/sedge",]
MTG_m1 <- lmer(X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_MTG)
MTG_m2 <- get_model(step(MTG_m1))
summary(MTG_m2)
# Exclude rows where abundance = 0
df_MTG <- df_MTG[df_MTG$log_X >= 0,]
MTG_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_MTG)
MTG_m4 <- get_model(step(MTG_m3))
summary(MTG_m4)
plot(MTG_m4)
RSS <- sum((df_MTG$log_X - fitted(MTG_m4, df_MTG))^2)
TSS <- sum((df_MTG$log_X - mean(df_MTG$log_X))^2)
R2 <- 1-RSS/TSS
R2
summary(MTG_m4)
3*0.3 + 9*0.05
-0.383 + 3*0.3 + 9*-0.051
-0.383 + 6*0.3 + 36*-0.051
d <- data.frame('Treatment'='TreatmentGap:Year2', year=3, year2 = 9, 'Fenced'=TRUE,)
d <- data.frame('Treatment'='TreatmentGap:Year2', year=3, year2 = 9, 'Fenced'=TRUE, 'Gap'=TRUE)
predict(MNTG_m4, d)
predict(MTG_m4, d)
d <- data.frame('Treatment'='TreatmentGap:Year2', Year=3, year2 = 9, 'Fenced'=TRUE, 'Gap'=TRUE)
predict(MTG_m4, d)
d <- data.frame('Treatment'='TreatmentGap:Year2', Year=3, Year2 = 9, 'Fenced'=TRUE, 'Gap'=TRUE)
predict(MTG_m4, d)
d <- data.frame('Treatment'='TreatmentGap', Year=3, Year2 = 9, 'Fenced'=TRUE, 'Gap'=TRUE)
predict(MTG_m4, d)
d <- data.frame('Treatment'='Gap', Year=3, Year2 = 9, 'Fenced'=TRUE, 'Gap'=TRUE)
predict(MTG_m4, d)
coef(MTG_m4)
d <- data.frame('Treatment'='Gap', Year=3, Year2 = 9, 'Fenced'=TRUE, 'Gap'=TRUE, 'Species.Name'='Poa spp')
predict(MTG_m4, d)
d2 <- data.frame('Treatment'='Gap', Year=3, Year2 = 9, 'Fenced'=FALSE, 'Gap'=TRUE, 'Species.Name'='Poa spp')
predict(MTG_m4, d2)
d3 <- data.frame('Treatment'='Gap', Year=3, Year2 = 9, 'Fenced'=TRUE, 'Gap'=FALSE, 'Species.Name'='Poa spp')
predict(MTG_m4, d2)
-0.63+ 3*0.115
-0.63+ 6*0.115
d <- data.frame('Treatment'='Gap', Year=3, Year2 = 9, 'Fenced'=TRUE, 'Gap'=FALSE, 'Species.Name'='Poa spp')
predict(MTG_m4, d)
d <- data.frame('Treatment'='Control', Year=3, Year2 = 9, 'Fenced'=TRUE, 'Gap'=FALSE, 'Species.Name'='Poa spp')
predict(MTG_m4, d)
d <- data.frame('Treatment'='Gap', Year=6, Year2 = 36, 'Fenced'=TRUE, 'Gap'=FALSE, 'Species.Name'='Poa spp')
predict(MTG_m4, d)
d <- data.frame('Treatment'='Control', Year=6, Year2 = 36, 'Fenced'=TRUE, 'Gap'=FALSE, 'Species.Name'='Poa spp')
predict(MTG_m4, d)
library(rstudioapi)
library(pROC)
library(lme4)
setwd(dirname(getActiveDocumentContext()$path))
df <- read.csv('../dataset/all_plots.csv')
colnames(df)
df <- df[,c(1,2,3,4,6,7)]
df[df$Large=='', 'Large'] <- 'No'
df <- df[!is.na(df$DBH.year.6),]
df <- df[!is.na(df$DBH.year.0),]
df$Treatment <- factor(df$Treatment)
df$Plot <- factor(df$Plot)
df$Large <- factor(df$Large)
df$log.DBH.year.6 <- log(df$DBH.year.6)
df$log.DBH.year.0 <- log(df$DBH.year.0)
rownames(df) <- 1:length(df[,1])
model1 <- glm(log.DBH.year.6 ~ (log.DBH.year.0+Treatment+Large)^2, data=df)
summary(model1)
plot(model1)
df[names(outliers_model1),]
# Load data
library(rstudioapi)
library(pROC)
library(lme4)
setwd(dirname(getActiveDocumentContext()$path))
df <- read.csv('../dataset/all_plots.csv')
colnames(df)
df <- df[,c(1,2,3,4,6,7)]
df[df$Large=='', 'Large'] <- 'No'
df <- df[!is.na(df$DBH.year.6),]
df <- df[!is.na(df$DBH.year.0),]
df$Treatment <- factor(df$Treatment)
df$Plot <- factor(df$Plot)
df$Large <- factor(df$Large)
df$log.DBH.year.6 <- log(df$DBH.year.6)
df$log.DBH.year.0 <- log(df$DBH.year.0)
rownames(df) <- 1:length(df[,1])
model1 <- glm(log.DBH.year.6 ~ (log.DBH.year.0+Treatment+Large)^2, data=df)
summary(model1)
plot(model1)
model2 <- lmer(log.DBH.year.6 ~ (log.DBH.year.0 + Treatment + Large)^2 +
(1|Plot), data=df)
summary(model2)
coef(model2)
df$Gap <- FALSE
df[(df$Treatment=='T2: Radial') & (df$Large=='Yes'), 'Gap'] <- TRUE
model3 <- lmer(log.DBH.year.6 ~ log.DBH.year.0 + Treatment + Gap +
log.DBH.year.0:Treatment + log.DBH.year.0:Gap +
(1|Plot), data=df)
summary(model3)
model4 <- lmer(log.DBH.year.6 ~ log.DBH.year.0 + Treatment + Gap +
+ log.DBH.year.0:Gap + (1|Plot), data=df)
summary(model4)
# load data
data = read.csv("/Users/nickjolly/Desktop/tfn/DataScienceProject/Tree DBH/dataset/all_plots.csv", stringsAsFactors = FALSE)
DBHdata = data[1:9]
# blank "Large", assume "No" where it's blank
DBHdata[DBHdata$Large == "", "Tree.Number"]
DBHdata[DBHdata$Large == "", "Large"] = "No"
# remove rows with NA in "DBH.year.6"
DBHdata[is.na(DBHdata$DBH.year.6), 1:7] # 9 NAs for "DBH.year.6"
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.6), ]
# remove rows with NA in "DBH.year.0"
DBHdata[is.na(DBHdata$DBH.year.0), 1:7] # 2 NAs for "DBH.year.0"
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.0), ]
# NA in "Class.year.0" and NA in "Class.year.6", no modification
DBHdata[is.na(DBHdata$Class.year.0) | is.na(DBHdata$Class.year.6), ]
# both in Plot5(T2: Radial), Tree.Number 148, 149, they have extremely large DBH.
DBHdata$Treatment = factor(DBHdata$Treatment)
DBHdata$Large = factor(DBHdata$Large)
DBHdata[DBHdata$DBH.year.6 <= DBHdata$DBH.year.0, ]
# points outside the main group
par(mfrow=c(1,2))
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = factor(DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80))
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6/DBHdata$DBH.year.0, type = "p", col = factor(DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80), ylab = "gradient")
DBHdata[DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80, ]
# remove these outliers
DBHdatarm = DBHdata[DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 1.25 & DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 0.9 & DBHdata$DBH.year.0 < 80, ]
cor(DBHdata$DBH.year.0, DBHdata$DBH.year.6)
cor(log(DBHdata$DBH.year.0), log(DBHdata$DBH.year.6))
cor(DBHdatarm$DBH.year.0, DBHdatarm$DBH.year.6)
cor(log(DBHdatarm$DBH.year.0), log(DBHdatarm$DBH.year.6))
par(mfrow=c(3,4))
for (i in 1:12) {
plot(DBHdata[DBHdata$Plot == i, "DBH.year.0"], DBHdata[DBHdata$Plot == i, "DBH.year.6"], xlab = paste("Plot", i, "DBH.year.0"), ylab = paste("Plot", i, "DBH.year.6"), xlim = c(20,70), ylim = c(20,70), col = DBHdata[DBHdata$Plot == i, "Treatment"])
abline(0,1)
}
for (i in 1:12) {
plot(log(DBHdata[DBHdata$Plot == i, "DBH.year.0"]), log(DBHdata[DBHdata$Plot == i, "DBH.year.6"]), xlab = paste("Plot", i, "log(DBH.year.0)"), ylab = paste("Plot", i, "log(DBH.year.6)"), xlim = c(3.0,4.3), ylim = c(3.0, 4.3), col = DBHdata[DBHdata$Plot == i, "Treatment"])
abline(0,1)
}
DBHdatarm$InGap = (DBHdatarm$Treatment == "T2: Radial" & DBHdatarm$Large == "Yes")
DBHdatarm$InGap = factor(DBHdatarm$InGap)
library(lme4)
mixed2.0 = lmer(log(DBH.year.6)~log(DBH.year.0)+Treatment+InGap+log(DBH.year.0):InGap+(1|Plot), data = DBHdatarm)
summary(mixed2.0)
VarCorr(mixed2.0)
y.hat <- fitted(mixed2.0) # Fitted values
int.hat <- ranef(mixed2.0)[[1]][[1]] # Predicted intercepts
res.hat <- residuals(mixed2.0) # Estimated residuals
tss = sum((log(DBHdatarm$DBH.year.6)-mean(log(DBHdatarm$DBH.year.6)))^2) #TSS
rss = sum((log(DBHdatarm$DBH.year.6)-y.hat)^2) #RSS
(tss-rss)/tss #R^2 = 0.9801595
qqnorm(int.hat, main="Random Intercepts"); qqline(int.hat)
qqnorm(res.hat, main="Residuals"); qqline(res.hat)
plot(y.hat, res.hat, xlab="Fitted Values", ylab="Residuals")
abline(h=0, lty=2)
plot(log(DBHdatarm$DBH.year.6), y.hat, col = DBHdatarm$Treatment)
abline(0, 1)
plot(log(DBHdatarm$DBH.year.6), y.hat, col = DBHdatarm$Large)
abline(0, 1)
plot(log(DBHdatarm$DBH.year.6), y.hat, col = DBHdatarm$InGap)
abline(0, 1)
# add tree growth attribute
DBHdata$Tree.growth = DBHdata$DBH.year.6-DBHdata$DBH.year.0
# plot tree growth for large VS not-large trees using all data
plot(DBHdata$DBH.year.0, DBHdata$Tree.growth, col = DBHdata$Large, ylim = c(-10,20))
legend("topright", legend = c("large", "not large"), fill = c("red", "black"), cex = 0.8)
# plot tree growth for large VS not-large trees across three treatments
plot(DBHdata[DBHdata$Treatment == "Control", "DBH.year.0"], DBHdata[DBHdata$Treatment == "Control", "Tree.growth"], col = DBHdata[DBHdata$Treatment == "Control", "Large"], xlab = "Control DBH.year.0", ylab = "Control tree growth", ylim = c(-10,20))
legend("topright", legend = c("large", "not large"), fill = c("red", "black"), cex = 0.8)
plot(DBHdata[DBHdata$Treatment == "T1: Gap", "DBH.year.0"], DBHdata[DBHdata$Treatment == "T1: Gap", "Tree.growth"], col = DBHdata[DBHdata$Treatment == "T1: Gap", "Large"], xlab = "T1 DBH.year.0", ylab = "T1 tree growth", ylim = c(-10,20))
legend("topright", legend = c("large", "not large"), fill = c("red", "black"), cex = 0.8)
plot(DBHdata[DBHdata$Treatment == "T2: Radial", "DBH.year.0"], DBHdata[DBHdata$Treatment == "T2: Radial", "Tree.growth"], col = DBHdata[DBHdata$Treatment == "T2: Radial", "Large"], xlab = "T2 DBH.year.0", ylab = "T2 tree growth", ylim = c(-10,20))
legend("topright", legend = c("large", "not large"), fill = c("red", "black"), cex = 0.8)
# plot constrains according to mixed2.0
plot(DBHdatarm$DBH.year.0, DBHdatarm$DBH.year.6, col = DBHdatarm$InGap, xlim = c(20,80))
abline(v = 52.76, col = "blue") # constrain for T2InGap > T2 not InGap
abline(v = 57.87, col = "green") # constrain for T2InGap > T1
abline(v = 74.42, col = "orange") # constrain for T2InGap > Control
legend("topleft", c("InGap points", "not InGap points", "InGap>T2notInGap constrain", "InGap>T1 constrain", "InGap>Control constrain"), fill = c("black", "red", "blue", "green", "orange"), cex = 0.9)
library(merTools)
X_ingap <- data.frame('DBH.year.0'=1:100, 'InGap'=TRUE, 'Plot'=6, 'Treatment'='T2: Radial')
PI_2 <- predictInterval(merMod = mixed2.0, newdata = X_ingap, level = 0.95, n.sims = 1000, stat = "median", type="linear.prediction", include.resid.var = TRUE)
for (t in c("Control", "T1: Gap", "T2: Radial")) {
X <- data.frame('DBH.year.0'=1:100, 'InGap'=FALSE, 'Plot'=6, 'Treatment'=t)
PI <- predictInterval(merMod = mixed2.0, newdata = X, level = 0.95, n.sims = 1000, stat = "median", type="linear.prediction", include.resid.var = TRUE)
plot(1:100, exp(PI$fit), type='n', xlim=c(20,60), ylim = c(10,80), xlab = "DBH.year.0", ylab = "predicted DBH.year.6")
polygon(c(1:100, 100:1), c(exp(PI$upr), rev(exp(PI$lwr))), col = "light grey", border = "light grey")
lines(1:100, exp(PI$fit), type = "l")
polygon(c(1:100, 100:1), c(exp(PI_2$upr), rev(exp(PI_2$lwr))), col = rgb(255,0,0, 50, maxColorValue = 255), border = rgb(255,0,0, 50, maxColorValue = 255))
lines(1:100, exp(PI_2$fit), type = "l", col = "red")
legend("topleft", legend = c("InGap", t), fill = c("red", "black"))
}
treatments = c("Control", "T1: Gap", "T2: Radial")
shades = c("light grey", rgb(255,0,0, 50, maxColorValue = 255), rgb(0,255,0, 50, maxColorValue = 255))
colours = c("black", "red", "green")
plot(1:100, exp(PI$fit), type='n', xlim=c(20,60), ylim = c(10,80), xlab = "DBH.year.0", ylab = "predicted DBH.year.6")
for (i in 1:3) {
X <- data.frame('DBH.year.0'=1:100, 'InGap'=FALSE, 'Plot'=6, 'Treatment'=treatments[i])
PI <- predictInterval(merMod = mixed2.0, newdata = X, level = 0.95, n.sims = 1000, stat = "median", type="linear.prediction", include.resid.var = TRUE)
polygon(c(1:100, 100:1), c(exp(PI$upr), rev(exp(PI$lwr))), col = shades[i], border = shades[i])
lines(1:100, exp(PI$fit), type = "l", col = colours[i])
}
legend("topleft", legend = treatments, fill = colours)
plot(DBHdatarm[DBHdatarm$Treatment == "Control", "DBH.year.0"], DBHdatarm[DBHdatarm$Treatment == "Control", "DBH.year.6"], xlim = c(20,70), ylim = c(20,70), xlab = "DBHdatarm$DBH.year.0", ylab = "DBHdatarm$DBH.year.6")
points(DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.0"], DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.6"], col = "red")
legend("bottomright", legend = c("Control", "InGap"), fill = c("black", "red"))
plot(DBHdatarm[DBHdatarm$Treatment == "T1: Gap", "DBH.year.0"], DBHdatarm[DBHdatarm$Treatment == "T1: Gap", "DBH.year.6"], xlim = c(20,70), ylim = c(20,70), xlab = "DBHdatarm$DBH.year.0", ylab = "DBHdatarm$DBH.year.6")
points(DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.0"], DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.6"], col = "red")
legend("bottomright", legend = c("T1: Gap", "InGap"), fill = c("black", "red"))
plot(DBHdatarm[DBHdatarm$Treatment == "T2: Radial", "DBH.year.0"], DBHdatarm[DBHdatarm$Treatment == "T2: Radial", "DBH.year.6"], xlim = c(20,70), ylim = c(20,70), xlab = "DBHdatarm$DBH.year.0", ylab = "DBHdatarm$DBH.year.6")
points(DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.0"], DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.6"], col = "red")
legend("bottomright", legend = c("T2: Radial", "InGap"), fill = c("black", "red"))
plot(DBHdatarm[DBHdatarm$Treatment != "T2: Radial", "DBH.year.0"], DBHdatarm[DBHdatarm$Treatment != "T2: Radial", "DBH.year.6"], col = DBHdatarm[DBHdatarm$Treatment != "T2: Radial", "Treatment"])
plot(DBHdatarm[DBHdatarm$Treatment != "T1: Gap", "DBH.year.0"], DBHdatarm[DBHdatarm$Treatment != "T1: Gap", "DBH.year.6"], col = DBHdatarm[DBHdatarm$Treatment != "T1: Gap", "Treatment"])
summary(mixed2.0)
summary(mixed2.0)
library(car)
?linearHypothesis
summary(mixed2.0)
library(car)
linearHypothesis(mixed2.0)
library(car)
C <- matrix(c(0,0,1,-1,0,0),6,1)
linearHypothesis(mixed2.0)
library(car)
C <- matrix(c(0,0,1,-1,0,0),6,1)
C
linearHypothesis(mixed2.0)
library(car)
C <- matrix(c(0,0,1,-1,0,0),6,1)
linearHypothesis(mixed2.0, C)
library(car)
C <- matrix(c(0,0,1,-1,0,0),1,6)
linearHypothesis(mixed2.0, C)
data = read.csv("/Users/nickjolly/Desktop/tfn/DataScienceProject/Tree DBH/dataset/all_plots.csv", stringsAsFactors = FALSE)
DBHdata = data[1:9]
# blank "Large", assume "No" where it's blank
DBHdata[DBHdata$Large == "", "Tree.Number"]
DBHdata[DBHdata$Large == "", "Large"] = "No"
# remove rows with NA in "DBH.year.6"
DBHdata[is.na(DBHdata$DBH.year.6), 1:7] # 9 NAs for "DBH.year.6"
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.6), ]
# remove rows with NA in "DBH.year.0"
DBHdata[is.na(DBHdata$DBH.year.0), 1:7] # 2 NAs for "DBH.year.0"
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.0), ]
# NA in "Class.year.0" and NA in "Class.year.6", no modification
DBHdata[is.na(DBHdata$Class.year.0) | is.na(DBHdata$Class.year.6), ]
# both in Plot5(T2: Radial), Tree.Number 148, 149, they have extremely large DBH.
DBHdata$Treatment = factor(DBHdata$Treatment)
DBHdata$Large = factor(DBHdata$Large)
DBHdata[DBHdata$DBH.year.6 <= DBHdata$DBH.year.0, ]
# points outside the main group
par(mfrow=c(1,2))
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = factor(DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80))
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6/DBHdata$DBH.year.0, type = "p", col = factor(DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80), ylab = "gradient")
DBHdata[DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80, ]
# remove these outliers
DBHdatarm = DBHdata[DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 1.25 & DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 0.9 & DBHdata$DBH.year.0 < 80, ]
cor(DBHdata$DBH.year.0, DBHdata$DBH.year.6)
cor(log(DBHdata$DBH.year.0), log(DBHdata$DBH.year.6))
cor(DBHdatarm$DBH.year.0, DBHdatarm$DBH.year.6)
cor(log(DBHdatarm$DBH.year.0), log(DBHdatarm$DBH.year.6))
par(mfrow=c(3,4))
for (i in 1:12) {
plot(DBHdata[DBHdata$Plot == i, "DBH.year.0"], DBHdata[DBHdata$Plot == i, "DBH.year.6"], xlab = paste("Plot", i, "DBH.year.0"), ylab = paste("Plot", i, "DBH.year.6"), xlim = c(20,70), ylim = c(20,70), col = DBHdata[DBHdata$Plot == i, "Treatment"])
abline(0,1)
}
for (i in 1:12) {
plot(log(DBHdata[DBHdata$Plot == i, "DBH.year.0"]), log(DBHdata[DBHdata$Plot == i, "DBH.year.6"]), xlab = paste("Plot", i, "log(DBH.year.0)"), ylab = paste("Plot", i, "log(DBH.year.6)"), xlim = c(3.0,4.3), ylim = c(3.0, 4.3), col = DBHdata[DBHdata$Plot == i, "Treatment"])
abline(0,1)
}
DBHdatarm$InGap = (DBHdatarm$Treatment == "T2: Radial" & DBHdatarm$Large == "Yes")
DBHdatarm$InGap = factor(DBHdatarm$InGap)
library(lme4)
mixed2.0 = lmer(log(DBH.year.6)~log(DBH.year.0)+Treatment+InGap+log(DBH.year.0):InGap+(1|Plot), data = DBHdatarm)
summary(mixed2.0)
VarCorr(mixed2.0)
y.hat <- fitted(mixed2.0) # Fitted values
int.hat <- ranef(mixed2.0)[[1]][[1]] # Predicted intercepts
res.hat <- residuals(mixed2.0) # Estimated residuals
tss = sum((log(DBHdatarm$DBH.year.6)-mean(log(DBHdatarm$DBH.year.6)))^2) #TSS
rss = sum((log(DBHdatarm$DBH.year.6)-y.hat)^2) #RSS
(tss-rss)/tss #R^2 = 0.9801595
qqnorm(int.hat, main="Random Intercepts"); qqline(int.hat)
qqnorm(res.hat, main="Residuals"); qqline(res.hat)
plot(y.hat, res.hat, xlab="Fitted Values", ylab="Residuals")
abline(h=0, lty=2)
plot(log(DBHdatarm$DBH.year.6), y.hat, col = DBHdatarm$Treatment)
abline(0, 1)
plot(log(DBHdatarm$DBH.year.6), y.hat, col = DBHdatarm$Large)
abline(0, 1)
plot(log(DBHdatarm$DBH.year.6), y.hat, col = DBHdatarm$InGap)
abline(0, 1)
# add tree growth attribute
DBHdata$Tree.growth = DBHdata$DBH.year.6-DBHdata$DBH.year.0
# plot tree growth for large VS not-large trees using all data
plot(DBHdata$DBH.year.0, DBHdata$Tree.growth, col = DBHdata$Large, ylim = c(-10,20))
legend("topright", legend = c("large", "not large"), fill = c("red", "black"), cex = 0.8)
# plot tree growth for large VS not-large trees across three treatments
plot(DBHdata[DBHdata$Treatment == "Control", "DBH.year.0"], DBHdata[DBHdata$Treatment == "Control", "Tree.growth"], col = DBHdata[DBHdata$Treatment == "Control", "Large"], xlab = "Control DBH.year.0", ylab = "Control tree growth", ylim = c(-10,20))
legend("topright", legend = c("large", "not large"), fill = c("red", "black"), cex = 0.8)
plot(DBHdata[DBHdata$Treatment == "T1: Gap", "DBH.year.0"], DBHdata[DBHdata$Treatment == "T1: Gap", "Tree.growth"], col = DBHdata[DBHdata$Treatment == "T1: Gap", "Large"], xlab = "T1 DBH.year.0", ylab = "T1 tree growth", ylim = c(-10,20))
legend("topright", legend = c("large", "not large"), fill = c("red", "black"), cex = 0.8)
plot(DBHdata[DBHdata$Treatment == "T2: Radial", "DBH.year.0"], DBHdata[DBHdata$Treatment == "T2: Radial", "Tree.growth"], col = DBHdata[DBHdata$Treatment == "T2: Radial", "Large"], xlab = "T2 DBH.year.0", ylab = "T2 tree growth", ylim = c(-10,20))
legend("topright", legend = c("large", "not large"), fill = c("red", "black"), cex = 0.8)
# plot constrains according to mixed2.0
plot(DBHdatarm$DBH.year.0, DBHdatarm$DBH.year.6, col = DBHdatarm$InGap, xlim = c(20,80))
abline(v = 52.76, col = "blue") # constrain for T2InGap > T2 not InGap
abline(v = 57.87, col = "green") # constrain for T2InGap > T1
abline(v = 74.42, col = "orange") # constrain for T2InGap > Control
legend("topleft", c("InGap points", "not InGap points", "InGap>T2notInGap constrain", "InGap>T1 constrain", "InGap>Control constrain"), fill = c("black", "red", "blue", "green", "orange"), cex = 0.9)
library(merTools)
X_ingap <- data.frame('DBH.year.0'=1:100, 'InGap'=TRUE, 'Plot'=6, 'Treatment'='T2: Radial')
PI_2 <- predictInterval(merMod = mixed2.0, newdata = X_ingap, level = 0.95, n.sims = 1000, stat = "median", type="linear.prediction", include.resid.var = TRUE)
for (t in c("Control", "T1: Gap", "T2: Radial")) {
X <- data.frame('DBH.year.0'=1:100, 'InGap'=FALSE, 'Plot'=6, 'Treatment'=t)
PI <- predictInterval(merMod = mixed2.0, newdata = X, level = 0.95, n.sims = 1000, stat = "median", type="linear.prediction", include.resid.var = TRUE)
plot(1:100, exp(PI$fit), type='n', xlim=c(20,60), ylim = c(10,80), xlab = "DBH.year.0", ylab = "predicted DBH.year.6")
polygon(c(1:100, 100:1), c(exp(PI$upr), rev(exp(PI$lwr))), col = "light grey", border = "light grey")
lines(1:100, exp(PI$fit), type = "l")
polygon(c(1:100, 100:1), c(exp(PI_2$upr), rev(exp(PI_2$lwr))), col = rgb(255,0,0, 50, maxColorValue = 255), border = rgb(255,0,0, 50, maxColorValue = 255))
lines(1:100, exp(PI_2$fit), type = "l", col = "red")
legend("topleft", legend = c("InGap", t), fill = c("red", "black"))
}
treatments = c("Control", "T1: Gap", "T2: Radial")
shades = c("light grey", rgb(255,0,0, 50, maxColorValue = 255), rgb(0,255,0, 50, maxColorValue = 255))
colours = c("black", "red", "green")
plot(1:100, exp(PI$fit), type='n', xlim=c(20,60), ylim = c(10,80), xlab = "DBH.year.0", ylab = "predicted DBH.year.6")
for (i in 1:3) {
X <- data.frame('DBH.year.0'=1:100, 'InGap'=FALSE, 'Plot'=6, 'Treatment'=treatments[i])
PI <- predictInterval(merMod = mixed2.0, newdata = X, level = 0.95, n.sims = 1000, stat = "median", type="linear.prediction", include.resid.var = TRUE)
polygon(c(1:100, 100:1), c(exp(PI$upr), rev(exp(PI$lwr))), col = shades[i], border = shades[i])
lines(1:100, exp(PI$fit), type = "l", col = colours[i])
}
legend("topleft", legend = treatments, fill = colours)
plot(DBHdatarm[DBHdatarm$Treatment == "Control", "DBH.year.0"], DBHdatarm[DBHdatarm$Treatment == "Control", "DBH.year.6"], xlim = c(20,70), ylim = c(20,70), xlab = "DBHdatarm$DBH.year.0", ylab = "DBHdatarm$DBH.year.6")
points(DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.0"], DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.6"], col = "red")
legend("bottomright", legend = c("Control", "InGap"), fill = c("black", "red"))
plot(DBHdatarm[DBHdatarm$Treatment == "T1: Gap", "DBH.year.0"], DBHdatarm[DBHdatarm$Treatment == "T1: Gap", "DBH.year.6"], xlim = c(20,70), ylim = c(20,70), xlab = "DBHdatarm$DBH.year.0", ylab = "DBHdatarm$DBH.year.6")
points(DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.0"], DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.6"], col = "red")
legend("bottomright", legend = c("T1: Gap", "InGap"), fill = c("black", "red"))
plot(DBHdatarm[DBHdatarm$Treatment == "T2: Radial", "DBH.year.0"], DBHdatarm[DBHdatarm$Treatment == "T2: Radial", "DBH.year.6"], xlim = c(20,70), ylim = c(20,70), xlab = "DBHdatarm$DBH.year.0", ylab = "DBHdatarm$DBH.year.6")
points(DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.0"], DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.6"], col = "red")
legend("bottomright", legend = c("T2: Radial", "InGap"), fill = c("black", "red"))
plot(DBHdatarm[DBHdatarm$Treatment != "T2: Radial", "DBH.year.0"], DBHdatarm[DBHdatarm$Treatment != "T2: Radial", "DBH.year.6"], col = DBHdatarm[DBHdatarm$Treatment != "T2: Radial", "Treatment"])
plot(DBHdatarm[DBHdatarm$Treatment != "T1: Gap", "DBH.year.0"], DBHdatarm[DBHdatarm$Treatment != "T1: Gap", "DBH.year.6"], col = DBHdatarm[DBHdatarm$Treatment != "T1: Gap", "Treatment"])
library(car)
# Matrix to set up the hypothesis
# H0: Beta_T1 - Beta_T2 = 0
C <- matrix(c(0,0,1,-1,0,0),1,6)
linearHypothesis(mixed2.0, C)
# We don't reject H0 at a 5% or 10% significance level
