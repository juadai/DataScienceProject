legend("bottomright", legend = c(levels(treatment)), col = seq(1,3, length.out = 3), pch=1)
boxplot(df$abs_richness~df$Treatment, xlab="Treatment", ylab="Understorey richness difference", main="Absolute Richness difference against different treatments")
# richness visualisation
hist(df$abs_diversity)
plotnum <- as.factor(df$Plot_number)
treatment <- as.factor(df$Treatment)
plot(df$abs_diversity, col = c(seq(1,12, length.out = 12))[as.factor(df$Plot_number)], main = "Scatterplot for diveristy (Plot_number)")
legend("bottomright", legend = c(seq(1,12, length.out = 12)), col = levels(plotnum), pch=1)
plot(df$abs_diversity, col = c(seq(1,3, length.out = 3))[as.factor(df$Treatment)], main ="Scatterplot for diveristy (Treatment)")
legend("bottomright", legend = c(levels(treatment)), col = seq(1,3, length.out = 3), pch=1)
boxplot(df$abs_diversity~df$Treatment, xlab="Treatment", ylab="Understorey diveristy difference", main="Absolute diveristy difference against different treatments")
boxplot(df$abs_diversity~df$Plot_number, xlab="Treatment", ylab="Understorey diveristy difference", main="Absolute diveristy difference against different treatments")
# richness visualisation
hist(df$relative_abundance)
plotnum <- as.factor(df$Plot_number)
treatment <- as.factor(df$Treatment)
plot(df$relative_abundance, col = c(seq(1,12, length.out = 12))[as.factor(df$Plot_number)], main = "Scatterplot for relative abundance (Plot_number)")
legend("topright", legend = c(seq(1,12, length.out = 12)), col = levels(plotnum), pch=1)
plot(df$relative_abundance, col = c(seq(1,3, length.out = 3))[as.factor(df$Treatment)], main ="Scatterplot for relative abundance (Treatment)")
legend("topright", legend = c(levels(treatment)), col = seq(1,3, length.out = 3), pch=1)
boxplot(df$relative_abundance~df$Treatment, xlab="Treatment", ylab="Understorey relative abundance difference", main="Absolute relative abundance difference against different treatments")
boxplot(df$relative_abundance~df$Plot_number, xlab="Treatment", ylab="Understorey relative abundance difference", main="Absolute relative abundance difference against different treatments")
# model using gaussian
guas.model=fitdist(df$abs_diversity, "norm")
guas.model
guas.mean=guas.model$estimate[1]
guas.sd =guas.model$estimate[2]
plot(guas.model)
n=length(df$abs_diversity)
samp.pct <- (1:n-0.5)/n
qqplot(x=qnorm(samp.pct,guas.mean, guas.sd), y=sort(df$abs_diversity), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot Guassian')
abline(0,1,col="red")
guass.model = glm(abs_diversity ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), family = gaussian, data = df)
summary(guass.model)
par(mfrow = c(2,2))
plot(guass.model)
pure.guass.model <- glm(abs_diversity ~ 1 , family = gaussian, data = df)
anova( pure.guass.model, guass.model, test = "F")
# the coefficients is significant in predicting the abs_diversity
# model using gaussian
model_rm = glm(abs_diversity ~ Treatment  + as.factor(Quadrat_number), family = gaussian, data = df)
summary(model_rm)
par(mfrow = c(2,2))
plot(model_rm)
anova(pure.guass.model, model_rm, test = "F")
# both coefficient is not significant in predicting the diversity, the only significant regressor is plot_number
# model using gaussian
model1 = glm(diversity_change_rate ~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = gaussian, data = df)
summary(model1)
par(mfrow = c(2,2))
plot(model1)
rate.guass.model <- glm(diversity_change_rate ~ 1 , family = gaussian, data = df)
anova(rate.guass.model, model1, test = "F")
# significant in 5% significance level
# model using gaussian
model = glm(abs_diversity ~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = gaussian, data = df)
model_selected1 <-step(model, scope=~.)
summary(model_selected1)
par(mfrow = c(2,2))
plot(model_selected1)
#The significant variables are the plot number, all other variables are not significant in predicting the diversity
# model using gamma with inverse link function on relative diversity
gamma.model1=fitdist(df$relative_diversity, "gamma")
gamma.model1
gamma.alpha=gamma.model1$estimate[1]
gamma.beta =gamma.model1$estimate[2]
plot(gamma.model1)
n=length(df$relative_diversity)
samp.pct <- (1:n-0.5)/n
qqplot(x=qgamma(samp.pct,gamma.alpha, gamma.beta), y=sort(df$relative_diversity), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot gamma')
abline(0,1,col="red")
model2 = glm(relative_diversity~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = Gamma(), data = df)
summary(model2)
par(mfrow = c(2,2))
plot(model2)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model2)
# model fit is adequate, reject the null
# model using gamma with inverse link function + on abs_diversity
abs_diversity <- df$abs_diversity + (-min(df$abs_diversity) + 1)
gamma.model2=fitdist(abs_diversity, "gamma")
gamma.model2
gamma.alpha2=gamma.model2$estimate[1]
gamma.beta2 =gamma.model2$estimate[2]
plot(gamma.model2)
n=length(abs_diversity)
samp.pct2 <- (1:n-0.5)/n
qqplot(x=qgamma(samp.pct2,gamma.alpha2, gamma.beta2), y=sort(abs_diversity), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot gamma')
abline(0,1,col="red")
model3 = glm(abs_diversity+ (-min(abs_diversity) + 1)~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = Gamma(), data = df)
summary(model3)
par(mfrow = c(2,2))
plot(model3)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model3)
# model fit is adequate, reject the null, but the fit is clearly worse than the relative_diversity
# model using gamma with log link function + abs_diversity
model4 = glm(abs_diversity+ (-min(abs_diversity) + 1) ~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = Gamma(link = "log"), data = df)
summary(model4)
par(mfrow = c(2,2))
plot(model4)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model4)
# model fit is adequate, reject the null, but the fit is clearly worse than the relative_diversity
# model using gamma with log link function + relative diversity
model5 = glm(relative_diversity~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = Gamma(link = "inverse"), data = df)
summary(model5)
par(mfrow = c(2,2))
plot(model5)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model5)
# model fit is adequate, reject the null, fit better than the abs_diversity
# model using gamma with log link function + diversity_change_rate
model6 = glm(diversity_change_rate + (-min(diversity_change_rate) + 1)~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = Gamma(link = "log"), data = df)
summary(model6)
par(mfrow = c(2,2))
plot(model6)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model6)
# worse fitting ever
# model using gaussian
# inverse link
#relative_diversity
model_selected2 <-step(model2, scope=~.)
summary(model_selected2)
par(mfrow = c(2,2))
plot(model_selected2)
# abs_diversity
model_selected3 <-step(model3, scope=~.)
summary(model_selected3)
par(mfrow = c(2,2))
plot(model_selected3)
#log
# abs_diversity
model_selected4 <-step(model4, scope=~.)
summary(model_selected4)
par(mfrow = c(2,2))
plot(model_selected4)
#relative_diversity
model_selected5 <-step(model5, scope=~.)
summary(model_selected5)
par(mfrow = c(2,2))
plot(model_selected5)
# model_select4 is clearly much better than model_select5
# model using poisson
poisson.model1=fitdist(ceiling(abs_diversity), "pois")
poisson.model1
poisson.lambda=poisson.model1$estimate
plot(poisson.model1)
n=length(ceiling(abs_diversity))
samp.pct <- (1:n-0.5)/n
qqplot(x=qpois(samp.pct,poisson.lambda), y=sort(ceiling(abs_diversity)), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot Poisson')
abline(0,1,col="red")
model7 = glm(abs_diversity + (-min(abs_diversity) + 1)~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = poisson, data = df)
summary(model7)
par(mfrow = c(2,2))
plot(model7)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model7)
#adquate, reject null, both coefs are significant
# model using poisson
poisson.model2=fitdist(ceiling(df$relative_diversity * 10^2), "pois")
poisson.model2
poisson.lambda2=poisson.model2$estimate
plot(poisson.model2)
n=length(ceiling(df$relative_diversity * 10^2))
samp.pct2 <- (1:n-0.5)/n
qqplot(x=qpois(samp.pct2, poisson.lambda2), y=sort(ceiling(df$relative_diversity * 10^2)), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot Poisson')
abline(0,1,col="red")
model8 = glm(relative_diversity  ~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = poisson, data = df)
summary(model8)
par(mfrow = c(2,2))
plot(model8)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model8)
#adequate, but poor fit than the previous one, reject null, both coefs are significant
# model using poisson + log link + relative_diversity
model9 = glm(relative_diversity ~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = poisson(link = "log"), data = df)
summary(model9)
par(mfrow = c(2,2))
plot(model9)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model9)
# model using poisson + log link + abs_diversity
model10 = glm(abs_diversity + (-min(abs_diversity) + 1)~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = poisson(link = "log"), data = df)
summary(model10)
par(mfrow = c(2,2))
plot(model10)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model10)
#both are adequate, but the abs_diversity is better fit than relative diversity
# model using poisson + log link + change rate
model11 = glm(diversity_change_rate + (-min(diversity_change_rate) + 1)~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = poisson(link = "log"), data = df)
summary(model11)
par(mfrow = c(2,2))
plot(model11)
#goodness of fit
qchisq(0.95,10)
P__disp(model11)
# model using gaussian
guas.modelr=fitdist(df$abs_richness, "norm")
guas.modelr
guas.meanr=guas.modelr$estimate[1]
guas.sdr =guas.modelr$estimate[2]
plot(guas.modelr)
n=length(df$abs_richness)
samp.pctr <- (1:n-0.5)/n
qqplot(x=qnorm(samp.pctr,guas.meanr, guas.sdr), y=sort(df$abs_richness), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot Guassian')
abline(0,1,col="red")
modelr = glm(abs_richness ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), family = gaussian, data = df)
summary(modelr)
par(mfrow = c(2,2))
plot(modelr)
pure.guass.modelr <- glm(abs_richness ~ 1 , family = gaussian, data = df)
anova( pure.guass.modelr, modelr, test = "F")
# the guassian model shows perfect fitting, with coefficient statistically significant
# model using gaussian
modelr1 = glm(relative_richness ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), family = gaussian, data = df)
summary(modelr1)
par(mfrow = c(2,2))
plot(modelr1)
relative.guass.modelr <- glm(relative_richness ~ 1 , family = gaussian, data = df)
anova(relative.guass.modelr, modelr1, test = "F")
#worse then before, but still better than the abs_richness varaible
# model using gaussian
modelr2 = glm(richness_change_rate ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), family = gaussian, data = df)
summary(modelr2)
par(mfrow = c(2,2))
plot(modelr2)
rate.guass.modelr <- glm(richness_change_rate ~ 1 , family = gaussian, data = df)
anova(rate.guass.modelr, modelr2, test = "F")
#rate change is worse
# model using gaussian
modelr_selected2 <-step(modelr, scope=~.)
summary(modelr_selected2)
par(mfrow = c(2,2))
plot(modelr_selected2)
# only plot number matters, the treatment is not statistically significant
# model using gamma+ inverse link + abs_richness
abs_richness <- df$abs_richness + (-min(df$abs_richness) + 1)
gamma.modelr3=fitdist(abs_richness , "gamma")
gamma.modelr3
gamma.alphar3=gamma.modelr3$estimate[1]
gamma.betar3 =gamma.modelr3$estimate[2]
plot(gamma.modelr3)
n=length(abs_richness)
samp.pct3 <- (1:n-0.5)/n
qqplot(x=qgamma(samp.pct3,gamma.alphar3, gamma.betar3), y=sort(abs_richness), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot gamma')
abline(0,1,col="red")
modelr3 = glm(abs_richness + (-min(abs_richness) + 1) ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), family = Gamma(link = "inverse"), data = df)
summary(modelr3)
par(mfrow = c(2,2))
plot(modelr3)
# goodness of fit
qchisq(0.95,10)
P__disp(modelr3)
# adequate, better fit than abs_richness, but worse than guassian
# model using gamma + inverse link  relative_richness
gamma.modelr4=fitdist(df$relative_richness , "gamma")
gamma.modelr4
gamma.alphar4=gamma.modelr4$estimate[1]
gamma.betar4 =gamma.modelr4$estimate[2]
plot(gamma.modelr4)
n=length(df$relative_richness)
samp.pct4 <- (1:n-0.5)/n
qqplot(x=qgamma(samp.pct4,gamma.alphar4, gamma.betar4), y=sort(df$relative_richness), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot gamma')
abline(0,1,col="red")
modelr4 = glm(relative_richness + (-min(abs_richness) + 1) ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), family = Gamma(link = "inverse"), data = df)
summary(modelr4)
par(mfrow = c(2,2))
plot(modelr4)
# goodness of fit
qchisq(0.95,10)
P__disp(modelr4)
# Not adequate, worse fit than abs_richness, but worse than guassian
# model using gamma + inverse link + abs_richness
modelr_selected3 <-step(modelr3, scope=~.)
summary(modelr_selected3)
par(mfrow = c(2,2))
plot(modelr_selected3)
# model using piosson + inverse
poisson.model1=fitdist(ceiling(abs_richness), "pois")
poisson.model1
poisson.lambda=poisson.model1$estimate
plot(poisson.model1)
n=length(ceiling(abs_richness))
samp.pct <- (1:n-0.5)/n
qqplot(x=qpois(samp.pct,poisson.lambda), y=sort(ceiling(abs_richness)), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot Poisson')
abline(0,1,col="red")
# model using poisson
modelr5 = glm(abs_richness + (-min(abs_richness) + 1) ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), family = poisson, data = df)
summary(modelr5)
par(mfrow = c(2,2))
plot(modelr5)
qchisq(0.95,10)
P__disp(modelr5)
# adequate, could be choosed
# model using negbinom + inverse
nb.modelr1=fitdist(ceiling(abs_richness), "nbinom")
nb.modelr1
nb.sizer1=nb.modelr1$estimate[1]
nb.mur1 = nb.modelr1$estimate[2]
nb.probr1=nb.sizer1/(nb.sizer1+nb.mur1)
plot(nb.modelr1)
n=length(ceiling(abs_richness))
samp.pctr1 <- (1:n-0.5)/n
qqplot(x=qnbinom(samp.pctr1,nb.sizer1, nb.probr1), y=sort(ceiling(abs_richness)), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot Negative Binomial')
abline(0,1,col="red")
#fit the model
modelra6 = glm.nb(abs_relative_abundance + (-min(abs_relative_abundance) + 1) ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), data = df)
summary(modelra6)
par(mfrow = c(2,2))
plot(modelr6)
# load data
data = read.csv("./datasets/all_plots.csv", stringsAsFactors = FALSE)
setwd(dirname(getActiveDocumentContext()$path))
library(rstudioapi)
library(pROC)
setwd(dirname(getActiveDocumentContext()$path))
# load data
data = read.csv("./datasets/all_plots.csv", stringsAsFactors = FALSE)
# load data
data = read.csv("./dataset/all_plots.csv", stringsAsFactors = FALSE)
summary(data)
sapply(data, typeof)
sapply(data[c(2,3,4,5,8,9,10,11,12,13,14,15)], unique)
DBHdata = data[1:9]
# blank "Large", assume "No" where it's blank
DBHdata[DBHdata$Large == "", "Tree.Number"]
DBHdata[DBHdata$Large == "", "Large"] = "No"
# remove rows with NA in "DBH.year.6"
DBHdata[is.na(DBHdata$DBH.year.6), 1:7] # 9 NAs for "DBH.year.6"
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.6), ]
# remove rows with NA in "DBH.year.6"
DBHdata[is.na(DBHdata$DBH.year.6), 1:7] # 9 NAs for "DBH.year.6"
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.6), ]
# blank "Large", assume "No" where it's blank
DBHdata[DBHdata$Large == "", "Tree.Number"]
DBHdata[DBHdata$Large == "", "Large"] = "No"
# remove rows with NA in "DBH.year.0"
DBHdata[is.na(DBHdata$DBH.year.0), 1:7] # 2 NAs for "DBH.year.0"
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.0), ]
# NA in "Class.year.0" and NA in "Class.year.6", no modification
DBHdata[is.na(DBHdata$Class.year.0) | is.na(DBHdata$Class.year.6), ]
# both in Plot5(T2: Radial), Tree.Number 148, 149, they have extremely large DBH.
DBHdata$Treatment = factor(DBHdata$Treatment)
DBHdata$Large = factor(DBHdata$Large)
DBHdata$Treatment = factor(DBHdata$Treatment)
DBHdata$Large = factor(DBHdata$Large)
DBH.year.6 <= DBH.year.0
DBHdata[DBHdata$DBH.year.6 <= DBHdata$DBH.year.0, ]
DBHpositive = DBHdata[DBHdata$DBH.year.6 > DBHdata$DBH.year.0, ]
par(mfrow=c(2,2))
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p")
plot(log(DBHdata$DBH.year.0), log(DBHdata$DBH.year.6), type = "p")
plot(DBHpositive$DBH.year.0, DBHpositive$DBH.year.6, type = "p")
plot(log(DBHpositive$DBH.year.0), log(DBHpositive$DBH.year.6), type = "p")
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = DBHdata$Treatment)
plot(log(DBHdata$DBH.year.0), log(DBHdata$DBH.year.6), type = "p", col = DBHdata$Treatment)
plot(DBHpositive$DBH.year.0, DBHpositive$DBH.year.6, type = "p", col = DBHpositive$Treatment)
plot(log(DBHpositive$DBH.year.0), log(DBHpositive$DBH.year.6), type = "p", col = DBHpositive$Treatment)
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = DBHdata$Large)
plot(log(DBHdata$DBH.year.0), log(DBHdata$DBH.year.6), type = "p", col = DBHdata$Large)
plot(DBHpositive$DBH.year.0, DBHpositive$DBH.year.6, type = "p", col = DBHpositive$Large)
plot(log(DBHpositive$DBH.year.0), log(DBHpositive$DBH.year.6), type = "p", col = DBHpositive$Large)
# points outside the main group
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6/DBHdata$DBH.year.0, type = "p", col = factor(DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80))
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = factor(DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80))
DBHdata[DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80, ]
# remove these outliers
DBHdatarm = DBHdata[DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 1.25 & DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 0.9 & DBHdata$DBH.year.0 < 80, ]
# points outside the main group
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6/DBHdata$DBH.year.0, type = "p", col = factor(DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80))
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = factor(DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80))
# points outside the main group
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6/DBHdata$DBH.year.0, type = "p", col = factor(DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80))
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = factor(DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80))
DBHdata[DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80, ]
# remove these outliers
DBHdatarm = DBHdata[DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 1.25 & DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 0.9 & DBHdata$DBH.year.0 < 80, ]
DBHpositiverm = DBHpositive[DBHpositive$DBH.year.6/DBHpositive$DBH.year.0 < 1.25 & DBHpositive$DBH.year.0 < 80, ]
cor(DBHdata$DBH.year.0, DBHdata$DBH.year.6)
cor(log(DBHdata$DBH.year.0), log(DBHdata$DBH.year.6))
cor(DBHpositive$DBH.year.0, DBHpositive$DBH.year.6)
cor(log(DBHpositive$DBH.year.0), log(DBHpositive$DBH.year.6))
cor(DBHdatarm$DBH.year.0, DBHdatarm$DBH.year.6)
cor(log(DBHdatarm$DBH.year.0), log(DBHdatarm$DBH.year.6))
cor(DBHpositiverm$DBH.year.0, DBHpositiverm$DBH.year.6)
cor(log(DBHpositiverm$DBH.year.0), log(DBHpositiverm$DBH.year.6))
shapiro.test(DBHdata$DBH.year.6)
shapiro.test(log(DBHdata$DBH.year.6))
shapiro.test(DBHpositive$DBH.year.6)
shapiro.test(log(DBHpositive$DBH.year.6))
shapiro.test(DBHdatarm$DBH.year.6)
shapiro.test(log(DBHdatarm$DBH.year.6))
shapiro.test(DBHpositiverm$DBH.year.6)
shapiro.test(log(DBHpositiverm$DBH.year.6)) # closest to normal
library(car)
leveneTest(DBH.year.6~Treatment, data = DBHdata)
leveneTest(DBH.year.6~Large, data = DBHdata)
leveneTest(log(DBH.year.6)~Treatment, data = DBHdata) # constant variance
leveneTest(log(DBH.year.6)~Large,data = DBHdata) # different variance
leveneTest(DBH.year.6~Treatment, data = DBHpositive) # constant variance
leveneTest(DBH.year.6~Large, data = DBHpositive) # constant variance
leveneTest(log(DBH.year.6)~Treatment, data = DBHpositive) # 2nd most constant variance
leveneTest(log(DBH.year.6)~Large, data = DBHpositive) # 3rd most different variance
leveneTest(DBH.year.6~Treatment, data = DBHdatarm)
leveneTest(DBH.year.6~Large, data = DBHdatarm) # constant variance
leveneTest(log(DBH.year.6)~Treatment, data = DBHdatarm) # 3rd most constant variance
leveneTest(log(DBH.year.6)~Large,data = DBHdatarm) # 2nd most different variance
leveneTest(DBH.year.6~Treatment, data = DBHpositiverm) # constant variance
leveneTest(DBH.year.6~Large, data = DBHpositiverm) # constant variance
leveneTest(log(DBH.year.6)~Treatment, data = DBHpositiverm) # most constant variance
leveneTest(log(DBH.year.6)~Large, data = DBHpositiverm) # most different variance
library(fitdistrplus)
descdist(log(DBHdata$DBH.year.6))
descdist(log(DBHpositive$DBH.year.6)) # close to normal
descdist(log(DBHdatarm$DBH.year.6)) # could be considered as normal
descdist(log(DBHpositiverm$DBH.year.6)) # could be considered as normal
descdist(DBHdatarm$DBH.year.6)
descdist(DBHpositiverm$DBH.year.6)
# best model derived from DBH.year.6~DBH.year.0*Treatment*Large
glm0 = glm(DBH.year.6~DBH.year.0+Treatment+Large+DBH.year.0:Large+Treatment:Large, data = DBHdata)
summary(glm0)
tss = sum((DBHdata$DBH.year.6-mean(DBHdata$DBH.year.6))^2) #TSS
rss = sum((DBHdata$DBH.year.6-glm0$fitted.values)^2) #RSS
(tss-rss)/tss #R^2 = 0.9467556
par(mfrow=c(2,2))
plot(glm0)
par(mfrow=c(1,1))
plot(DBHdata$DBH.year.6, glm0$fitted.values, type = "p", col = DBHdata$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
abline(0,1)
plot(DBHdata$DBH.year.6, glm0$fitted.values, type = "p", col = DBHdata$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
abline(0,1)
glm1.0 = glm(DBH.year.6~DBH.year.0+Treatment+Large+DBH.year.0:Large+Treatment:Large, data = DBHpositiverm)
summary(glm1.0)
tss = sum((DBHpositiverm$DBH.year.6-mean(DBHpositiverm$DBH.year.6))^2) #TSS
rss = sum((DBHpositiverm$DBH.year.6-glm1.0$fitted.values)^2) #RSS
(tss-rss)/tss #R^2 = 0.9801139
par(mfrow=c(2,2))
plot(glm1.0)
par(mfrow=c(1,1))
plot(DBHpositiverm$DBH.year.6, glm1.0$fitted.values, type = "p", col = DBHpositiverm$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
abline(0,1)
plot(DBHpositiverm$DBH.year.6, glm1.0$fitted.values, type = "p", col = DBHpositiverm$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
abline(0,1)
glm1.1 = glm(log(DBH.year.6)~log(DBH.year.0)+Treatment+Large+log(DBH.year.0):Large+Treatment:Large, data = DBHpositive)
summary(glm1.1)
tss = sum((log(DBHpositive$DBH.year.6)-mean(log(DBHpositive$DBH.year.6)))^2) #TSS
rss = sum((log(DBHpositive$DBH.year.6)-glm1.1$fitted.values)^2) #RSS
(tss-rss)/tss #R^2 = 0.9554377
par(mfrow=c(2,2))
plot(glm1.1)
par(mfrow=c(1,1))
plot(log(DBHpositive$DBH.year.6), glm1.1$fitted.values, type = "p", col = DBHpositive$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
abline(0,1)
plot(log(DBHpositive$DBH.year.6), glm1.1$fitted.values, type = "p", col = DBHpositive$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
abline(0,1)
glm1.2 = glm(log(DBH.year.6)~log(DBH.year.0)+Treatment+Large+log(DBH.year.0):Large+Treatment:Large, data = DBHdatarm)
summary(glm1.2)
anova(glm1.2)
tss = sum((log(DBHdatarm$DBH.year.6)-mean(log(DBHdatarm$DBH.year.6)))^2) #TSS
rss = sum((log(DBHdatarm$DBH.year.6)-glm1.2$fitted.values)^2) #RSS
(tss-rss)/tss #R^2 = 0.9783684
par(mfrow=c(2,2))
plot(glm1.2)
par(mfrow=c(1,1))
plot(log(DBHdatarm$DBH.year.6), glm1.2$fitted.values, type = "p", col = DBHdatarm$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
abline(0,1)
plot(log(DBHdatarm$DBH.year.6), glm1.2$fitted.values, type = "p", col = DBHdatarm$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
abline(0,1)
glm1.3 = glm(log(DBH.year.6)~log(DBH.year.0)+Treatment+Large+log(DBH.year.0):Large+Treatment:Large, data = DBHpositiverm)
summary(glm1.3)
anova(glm1.3)
tss = sum((log(DBHpositiverm$DBH.year.6)-mean(log(DBHpositiverm$DBH.year.6)))^2) #TSS
rss = sum((log(DBHpositiverm$DBH.year.6)-glm1.3$fitted.values)^2) #RSS
(tss-rss)/tss #R^2 = 0.9826943
par(mfrow=c(2,2))
plot(glm1.3)
par(mfrow=c(1,1))
plot(log(DBHpositiverm$DBH.year.6), glm1.3$fitted.values, type = "p", col = DBHpositiverm$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
abline(0,1)
plot(log(DBHpositiverm$DBH.year.6), glm1.3$fitted.values, type = "p", col = DBHpositiverm$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
abline(0,1)
