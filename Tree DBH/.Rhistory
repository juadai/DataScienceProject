var(DBHdata$DBH.year.0) # quite large variance, variance = twice mean
hist(DBHdata$DBH.year.0, breaks = 100)
# super rough comparison
set.seed(0)
hist(DBHdata$DBH.year.0, breaks = 100)
hist(rnorm(400, 35, 5), breaks = 40, add = TRUE, col = "light blue")
# DBH.year.0 has too many values within 20-30 to fit a normal shape
descdist(DBHdata$DBH.year.0)
fitdis4 = fitdist(DBHdata$DBH.year.0, "norm")
summary(fitdis4)
par(mfrow = c(2, 2))
denscomp(fitdis4, legendtext = "Normal")
qqcomp(fitdis4, legendtext = "Normal")
cdfcomp(fitdis4, legendtext = "Normal")
ppcomp(fitdis4, legendtext = "Normal")
# DBH.yea.0 is not quite like normal distribution, its distribution is also quite different from Tree.growth
# curve shape in the QQplot->maybe some transformation will make it closer to normal
plot(DBHdata$DBH.year.0, DBHdata$Tree.growth, type = "p", xlab = "DBH.year.0", ylab = "Tree.growth")
plot(DBHdata$DBH.year.0, DBHdata$Tree.growth, type = "p", col = DBHdata$Treatment, xlim = c(20, 70), ylim = c(0, 8), xlab = "DBH.year.0", ylab = "Tree.growth(zoom in)")
legend("topright", legend = c("Control", "T1: Gap", "T2: Radial"), fill = c(1, 2, 3))
plot(DBHdata$DBH.year.0, DBHdata$Tree.growth, type = "p", col = DBHdata$Large, xlim = c(20, 70),ylim = c(0, 8), xlab = "DBH.year.0", ylab = "Tree.growth(zoom in)")
legend("topright", legend = c("not large", "large"), fill = c(1, 2))
par(mfrow = c(3, 4))
for (i in seq(1:12))
plot(DBHdata[DBHdata$Plot == i, "DBH.year.0"], DBHdata[DBHdata$Plot == i, "Tree.growth"], type = "p", col = DBHdata[DBHdata$Plot == i, "Treatment"], xlim = c(20, 70), ylim = c(0, 8), xlab = "DBH.year.0", ylab = paste("Plot", i, "Tree.growth"))
par(mfrow = c(3, 4))
for (i in seq(1:12))
plot(DBHdata[DBHdata$Plot == i, "DBH.year.0"], log(DBHdata[DBHdata$Plot == i, "Tree.growth"]), type = "p", col = DBHdata[DBHdata$Plot == i, "Treatment"], xlim = c(20, 70), ylim = c(-3, 3), xlab = "DBH.year.0", ylab = paste("Plot", i, "log growth"))
par(mfrow = c(1, 3))
for (i in c("Control", "T1: Gap", "T2: Radial"))
plot(DBHdata[DBHdata$Treatment == i, "DBH.year.0"], DBHdata[DBHdata$Treatment == i, "Tree.growth"], type = "p", col = DBHdata$Large, xlim = c(20, 70), ylim = c(0, 8), xlab = "DBH.year.0", ylab = paste(i, "Tree.growth"))
par(mfrow = c(1, 3))
for (i in c("Control", "T1: Gap", "T2: Radial"))
plot(DBHdata[DBHdata$Treatment == i, "DBH.year.0"], log(DBHdata[DBHdata$Treatment == i, "Tree.growth"]), type = "p", col = DBHdata$Large, xlim = c(20, 70), ylim = c(-3, 3), xlab = "DBH.year.0", ylab = paste(i, "log growth"))
# best model derived from Tree.growth~DBH.year.0*Large*Treatment
glm1.0 = glm(Tree.growth~-1+DBH.year.0+Large+DBH.year.0:Large+Treatment:Large, data = DBHdata)
summary(glm1.0)
tss = sum((DBHdata$Tree.growth-mean(DBHdata$Tree.growth))^2) #TSS
rss = sum((DBHdata$Tree.growth-fitted(glm1.0))^2) #RSS
tss; rss
(tss-rss)/tss #R^2
plot(glm1.0)
plot(DBHdata$Tree.growth, fitted(glm1.0), type = "p", col = DBHdata$Treatment)
abline(0, 1)
# better than glm1.0, with increased Rsquare value and much smaller and "flat" residuals, but still not a good enough model for Tree.growth
glm2.0 = glm(Tree.growth~Treatment+Large+DBH.year.0+Treatment:DBH.year.0+Large:DBH.year.0, family = "Gamma", data = DBHdata)
summary(glm2.0)
tss = sum((DBHdata$Tree.growth-mean(DBHdata$Tree.growth))^2) #TSS
rss = sum((DBHdata$Tree.growth-fitted(glm2.0))^2) #RSS
tss; rss
(tss-rss)/tss #R^2
plot(glm2.0)
plot(DBHdata$Tree.growth, fitted(glm2.0), type = "p", col = DBHdata$Treatment)
abline(0, 1)
# view instances marked as outliers in the residual plots and Cook's distance plots in both glm1.0 and glm2.0
DBHdata[c("198","141","393","96","81","156"), ] # 4 outof 6 has large Tree.growth > 8
DBHdrop = subset(DBHdata, !(Tree.Number == 225 | Tree.Number == 478 | Tree.Number == 496 | Tree.Number == 71 | Tree.Number == 77 | Tree.Number == 184))
glm1.1 = glm(Tree.growth~-1+DBH.year.0+Large+Treatment+DBH.year.0:Large+Treatment:Large, data = DBHdrop)
summary(glm1.1)
tss = sum((DBHdrop$Tree.growth-mean(DBHdrop$Tree.growth))^2) #TSS
rss = sum((DBHdrop$Tree.growth-fitted(glm1.1))^2) #RSS
tss; rss
(tss-rss)/tss #R^2
plot(glm1.1)
plot(DBHdrop$Tree.growth, fitted(glm1.1), type = "p", col = DBHdrop$Treatment)
abline(0, 1)
glm2.1 = glm(Tree.growth~Treatment+Large+DBH.year.0+Treatment:DBH.year.0+Large:DBH.year.0, family = "Gamma", data = DBHdrop)
summary(glm2.1)
tss = sum((DBHdrop$Tree.growth-mean(DBHdrop$Tree.growth))^2) #TSS
rss = sum((DBHdrop$Tree.growth-fitted(glm2.1))^2) #RSS
tss; rss
(tss-rss)/tss #R^2
plot(glm2.1)
plot(DBHdrop$Tree.growth, fitted(glm2.1), type = "p", col = DBHdrop$Treatment)
abline(0, 1)
DBHdrop[DBHdrop$Tree.growth >= 8, ]
DBHremove = DBHdrop[DBHdrop$Tree.growth < 8, ]
glm1.2 = glm(Tree.growth~Treatment+Large+DBH.year.0+Large:DBH.year.0+Treatment:Large, data = DBHremove)
summary(glm1.2)
tss = sum((DBHremove$Tree.growth-mean(DBHremove$Tree.growth))^2) #TSS
rss = sum((DBHremove$Tree.growth-fitted(glm1.2))^2) #RSS
tss; rss
(tss-rss)/tss #R^2
plot(glm1.2)
plot(DBHremove$Tree.growth, fitted(glm1.2), type = "p", col = DBHremove$Treatment)
abline(0, 1)
glm2.2 = glm(Tree.growth~Treatment+Large+DBH.year.0+Treatment:DBH.year.0+Large:DBH.year.0, family = "Gamma", data = DBHremove)
summary(glm2.2)
tss = sum((DBHremove$Tree.growth-mean(DBHremove$Tree.growth))^2) #TSS
rss = sum((DBHremove$Tree.growth-fitted(glm2.2))^2) #RSS
tss; rss
(tss-rss)/tss #R^2
plot(glm2.2)
plot(DBHremove$Tree.growth, fitted(glm2.2), type = "p", col = DBHremove$Treatment)
abline(0, 1)
library(lme4)
mixed1.0 = lmer(Tree.growth~DBH.year.0+Large+Treatment+DBH.year.0:Large+Treatment:Large+(DBH.year.0+Large+Treatment+DBH.year.0:Large+Treatment:Large|Plot), data = DBHdata)
summary(mixed1.0)
VarCorr(mixed1.0)
y.hat1.0 <- fitted(mixed1.0) # Fitted values
int.hat1.0 <- ranef(mixed1.0)[[1]][[1]] # Predicted intercepts
res.hat1.0 <- residuals(mixed1.0) # Estimated residuals
tss = sum((DBHdata$Tree.growth-mean(DBHdata$Tree.growth))^2) #TSS
rss = sum((DBHdata$Tree.growth-y.hat1.0)^2) #RSS
tss; rss; (tss-rss)/tss #R^2
qqnorm(int.hat1.0, main="Random Intercepts"); qqline(int.hat1.0)
qqnorm(res.hat1.0, main="Residuals"); qqline(res.hat1.0)
plot(y.hat1.0, res.hat1.0, xlab="Fitted Values", ylab="Residuals")
abline(h=0, lty=2)
plot(DBHdata$Tree.growth, y.hat1.0, col = DBHdata$Treatment)
abline(0, 1)
plot(DBHdata$Tree.growth, y.hat1.0, col = DBHdata$Large)
abline(0, 1)
mixed1.1 = lmer(Tree.growth~DBH.year.0+Large+Treatment+DBH.year.0:Large+Treatment:Large+(DBH.year.0+Large+Treatment+DBH.year.0:Large+Treatment:Large|Plot), data = DBHremove)
summary(mixed1.1)
VarCorr(mixed1.1)
y.hat1.1 <- fitted(mixed1.1) # Fitted values
int.hat1.1 <- ranef(mixed1.1)[[1]][[1]] # Predicted intercepts
res.hat1.1 <- residuals(mixed1.1) # Estimated residuals
tss = sum((DBHremove$Tree.growth-mean(DBHremove$Tree.growth))^2) #TSS
rss = sum((DBHremove$Tree.growth-y.hat1.1)^2) #RSS
tss; rss; (tss-rss)/tss #R^2
qqnorm(int.hat1.1, main="Random Intercepts"); qqline(int.hat1.1)
qqnorm(res.hat1.1, main="Residuals"); qqline(res.hat1.1)
plot(y.hat1.1, res.hat1.1, xlab="Fitted Values", ylab="Residuals")
abline(h=0, lty=2)
plot(DBHremove$Tree.growth, y.hat1.1, col = DBHremove$Treatment)
abline(0, 1)
plot(DBHremove$Tree.growth, y.hat1.1, col = DBHremove$Large)
abline(0, 1)
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p") # 8 points outside main group
DBHrm = DBHdata[DBHdata$Tree.growth < 10 & DBHdata$DBH.year.0 < 80, ] # dataframe without the 8 rows
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = DBHdata$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = DBHdata$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
plot(DBHrm$DBH.year.0, DBHrm$DBH.year.6, type = "p", col = DBHrm$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
plot(DBHrm$DBH.year.0, DBHrm$DBH.year.6, type = "p", col = DBHrm$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
cor(DBHdata$DBH.year.0, DBHdata$DBH.year.6) #0.9679595
# best model derived from DBH.year.6~DBH.year.0*Treatment*Large
glm3.0 = glm(DBH.year.6~DBH.year.0+Treatment+Large+DBH.year.0:Large+Treatment:Large, data = DBHdata)
summary(glm3.0)
tss = sum((DBHdata$DBH.year.6-mean(DBHdata$DBH.year.6))^2) #TSS
rss = sum((DBHdata$DBH.year.6-glm3.0$fitted.values)^2) #RSS
(tss-rss)/tss #R^2 = 0.9541006
par(mfrow=c(2,2))
plot(glm3.0)
par(mfrow=c(1,1))
plot(DBHdata$DBH.year.6, glm3.0$fitted.values, type = "p", col = DBHdata$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
abline(0,1)
plot(DBHdata$DBH.year.6, glm3.0$fitted.values, type = "p", col = DBHdata$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
abline(0,1)
# same formula as glm3.0
glm4.0 = glm(DBH.year.6~DBH.year.0+Treatment+Large+DBH.year.0:Large+Treatment:Large, data = DBHrm)
summary(glm4.0)
tss = sum((DBHrm$DBH.year.6-mean(DBHrm$DBH.year.6))^2) #TSS
rss = sum((DBHrm$DBH.year.6-glm4.0$fitted.values)^2) #RSS
(tss-rss)/tss #R^2 = 0.9801139
par(mfrow=c(2,2))
plot(glm4.0)
par(mfrow=c(1,1))
plot(DBHrm$DBH.year.6, glm4.0$fitted.values, type = "p", col = DBHrm$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
abline(0,1)
plot(DBHrm$DBH.year.6, glm4.0$fitted.values, type = "p", col = DBHrm$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
abline(0,1)
knitr::opts_chunk$set(echo = TRUE)
library(fitdistrplus)
df = read.csv("./understorey_output.csv")
# richness visualisation
hist(df$abs_richness)
plotnum <- as.factor(df$Plot_number)
treatment <- as.factor(df$Treatment)
plot(df$abs_richness, col = c(seq(1,12, length.out = 12))[as.factor(df$Plot_number)], main = "Scatterplot for richness (Plot_number)")
legend("bottomright", legend = c(seq(1,12, length.out = 12)), col = levels(plotnum), pch=1)
plot(df$abs_richness, col = c(seq(1,3, length.out = 3))[as.factor(df$Treatment)], main ="Scatterplot for richness (Treatment)")
legend("bottomright", legend = c(levels(treatment)), col = seq(1,3, length.out = 3), pch=1)
boxplot(df$abs_richness~df$Treatment, xlab="Treatment", ylab="Understorey richness difference", main="Absolute Richness difference against different treatments")
# richness visualisation
hist(df$abs_diversity)
plotnum <- as.factor(df$Plot_number)
treatment <- as.factor(df$Treatment)
plot(df$abs_diversity, col = c(seq(1,12, length.out = 12))[as.factor(df$Plot_number)], main = "Scatterplot for diveristy (Plot_number)")
legend("bottomright", legend = c(seq(1,12, length.out = 12)), col = levels(plotnum), pch=1)
plot(df$abs_diversity, col = c(seq(1,3, length.out = 3))[as.factor(df$Treatment)], main ="Scatterplot for diveristy (Treatment)")
legend("bottomright", legend = c(levels(treatment)), col = seq(1,3, length.out = 3), pch=1)
boxplot(df$abs_diversity~df$Treatment, xlab="Treatment", ylab="Understorey diveristy difference", main="Absolute diveristy difference against different treatments")
boxplot(df$abs_diversity~df$Plot_number, xlab="Treatment", ylab="Understorey diveristy difference", main="Absolute diveristy difference against different treatments")
# richness visualisation
hist(df$relative_abundance)
plotnum <- as.factor(df$Plot_number)
treatment <- as.factor(df$Treatment)
plot(df$relative_abundance, col = c(seq(1,12, length.out = 12))[as.factor(df$Plot_number)], main = "Scatterplot for relative abundance (Plot_number)")
legend("topright", legend = c(seq(1,12, length.out = 12)), col = levels(plotnum), pch=1)
plot(df$relative_abundance, col = c(seq(1,3, length.out = 3))[as.factor(df$Treatment)], main ="Scatterplot for relative abundance (Treatment)")
legend("topright", legend = c(levels(treatment)), col = seq(1,3, length.out = 3), pch=1)
boxplot(df$relative_abundance~df$Treatment, xlab="Treatment", ylab="Understorey relative abundance difference", main="Absolute relative abundance difference against different treatments")
boxplot(df$relative_abundance~df$Plot_number, xlab="Treatment", ylab="Understorey relative abundance difference", main="Absolute relative abundance difference against different treatments")
# model using gaussian
guas.model=fitdist(df$abs_diversity, "norm")
guas.model
guas.mean=guas.model$estimate[1]
guas.sd =guas.model$estimate[2]
plot(guas.model)
n=length(df$abs_diversity)
samp.pct <- (1:n-0.5)/n
qqplot(x=qnorm(samp.pct,guas.mean, guas.sd), y=sort(df$abs_diversity), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot Guassian')
abline(0,1,col="red")
guass.model = glm(abs_diversity ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), family = gaussian, data = df)
summary(guass.model)
par(mfrow = c(2,2))
plot(guass.model)
pure.guass.model <- glm(abs_diversity ~ 1 , family = gaussian, data = df)
anova( pure.guass.model, guass.model, test = "F")
# the coefficients is significant in predicting the abs_diversity
# model using gaussian
model_rm = glm(abs_diversity ~ Treatment  + as.factor(Quadrat_number), family = gaussian, data = df)
summary(model_rm)
par(mfrow = c(2,2))
plot(model_rm)
anova(pure.guass.model, model_rm, test = "F")
# both coefficient is not significant in predicting the diversity, the only significant regressor is plot_number
# model using gaussian
model1 = glm(diversity_change_rate ~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = gaussian, data = df)
summary(model1)
par(mfrow = c(2,2))
plot(model1)
rate.guass.model <- glm(diversity_change_rate ~ 1 , family = gaussian, data = df)
anova(rate.guass.model, model1, test = "F")
# significant in 5% significance level
# model using gaussian
model = glm(abs_diversity ~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = gaussian, data = df)
model_selected1 <-step(model, scope=~.)
summary(model_selected1)
par(mfrow = c(2,2))
plot(model_selected1)
#The significant variables are the plot number, all other variables are not significant in predicting the diversity
# model using gamma with inverse link function on relative diversity
gamma.model1=fitdist(df$relative_diversity, "gamma")
gamma.model1
gamma.alpha=gamma.model1$estimate[1]
gamma.beta =gamma.model1$estimate[2]
plot(gamma.model1)
n=length(df$relative_diversity)
samp.pct <- (1:n-0.5)/n
qqplot(x=qgamma(samp.pct,gamma.alpha, gamma.beta), y=sort(df$relative_diversity), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot gamma')
abline(0,1,col="red")
model2 = glm(relative_diversity~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = Gamma(), data = df)
summary(model2)
par(mfrow = c(2,2))
plot(model2)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model2)
# model fit is adequate, reject the null
# model using gamma with inverse link function + on abs_diversity
abs_diversity <- df$abs_diversity + (-min(df$abs_diversity) + 1)
gamma.model2=fitdist(abs_diversity, "gamma")
gamma.model2
gamma.alpha2=gamma.model2$estimate[1]
gamma.beta2 =gamma.model2$estimate[2]
plot(gamma.model2)
n=length(abs_diversity)
samp.pct2 <- (1:n-0.5)/n
qqplot(x=qgamma(samp.pct2,gamma.alpha2, gamma.beta2), y=sort(abs_diversity), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot gamma')
abline(0,1,col="red")
model3 = glm(abs_diversity+ (-min(abs_diversity) + 1)~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = Gamma(), data = df)
summary(model3)
par(mfrow = c(2,2))
plot(model3)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model3)
# model fit is adequate, reject the null, but the fit is clearly worse than the relative_diversity
# model using gamma with log link function + abs_diversity
model4 = glm(abs_diversity+ (-min(abs_diversity) + 1) ~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = Gamma(link = "log"), data = df)
summary(model4)
par(mfrow = c(2,2))
plot(model4)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model4)
# model fit is adequate, reject the null, but the fit is clearly worse than the relative_diversity
# model using gamma with log link function + relative diversity
model5 = glm(relative_diversity~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = Gamma(link = "inverse"), data = df)
summary(model5)
par(mfrow = c(2,2))
plot(model5)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model5)
# model fit is adequate, reject the null, fit better than the abs_diversity
# model using gamma with log link function + diversity_change_rate
model6 = glm(diversity_change_rate + (-min(diversity_change_rate) + 1)~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = Gamma(link = "log"), data = df)
summary(model6)
par(mfrow = c(2,2))
plot(model6)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model6)
# worse fitting ever
# model using gaussian
# inverse link
#relative_diversity
model_selected2 <-step(model2, scope=~.)
summary(model_selected2)
par(mfrow = c(2,2))
plot(model_selected2)
# abs_diversity
model_selected3 <-step(model3, scope=~.)
summary(model_selected3)
par(mfrow = c(2,2))
plot(model_selected3)
#log
# abs_diversity
model_selected4 <-step(model4, scope=~.)
summary(model_selected4)
par(mfrow = c(2,2))
plot(model_selected4)
#relative_diversity
model_selected5 <-step(model5, scope=~.)
summary(model_selected5)
par(mfrow = c(2,2))
plot(model_selected5)
# model_select4 is clearly much better than model_select5
# model using poisson
poisson.model1=fitdist(ceiling(abs_diversity), "pois")
poisson.model1
poisson.lambda=poisson.model1$estimate
plot(poisson.model1)
n=length(ceiling(abs_diversity))
samp.pct <- (1:n-0.5)/n
qqplot(x=qpois(samp.pct,poisson.lambda), y=sort(ceiling(abs_diversity)), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot Poisson')
abline(0,1,col="red")
model7 = glm(abs_diversity + (-min(abs_diversity) + 1)~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = poisson, data = df)
summary(model7)
par(mfrow = c(2,2))
plot(model7)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model7)
#adquate, reject null, both coefs are significant
# model using poisson
poisson.model2=fitdist(ceiling(df$relative_diversity * 10^2), "pois")
poisson.model2
poisson.lambda2=poisson.model2$estimate
plot(poisson.model2)
n=length(ceiling(df$relative_diversity * 10^2))
samp.pct2 <- (1:n-0.5)/n
qqplot(x=qpois(samp.pct2, poisson.lambda2), y=sort(ceiling(df$relative_diversity * 10^2)), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot Poisson')
abline(0,1,col="red")
model8 = glm(relative_diversity  ~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = poisson, data = df)
summary(model8)
par(mfrow = c(2,2))
plot(model8)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model8)
#adequate, but poor fit than the previous one, reject null, both coefs are significant
# model using poisson + log link + relative_diversity
model9 = glm(relative_diversity ~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = poisson(link = "log"), data = df)
summary(model9)
par(mfrow = c(2,2))
plot(model9)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model9)
# model using poisson + log link + abs_diversity
model10 = glm(abs_diversity + (-min(abs_diversity) + 1)~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = poisson(link = "log"), data = df)
summary(model10)
par(mfrow = c(2,2))
plot(model10)
#goodness of fit
qchisq(0.95,10)
library(msme)
P__disp(model10)
#both are adequate, but the abs_diversity is better fit than relative diversity
# model using poisson + log link + change rate
model11 = glm(diversity_change_rate + (-min(diversity_change_rate) + 1)~ Treatment + as.factor(Plot_number) + as.factor(Quadrat_number), family = poisson(link = "log"), data = df)
summary(model11)
par(mfrow = c(2,2))
plot(model11)
#goodness of fit
qchisq(0.95,10)
P__disp(model11)
# model using gaussian
guas.modelr=fitdist(df$abs_richness, "norm")
guas.modelr
guas.meanr=guas.modelr$estimate[1]
guas.sdr =guas.modelr$estimate[2]
plot(guas.modelr)
n=length(df$abs_richness)
samp.pctr <- (1:n-0.5)/n
qqplot(x=qnorm(samp.pctr,guas.meanr, guas.sdr), y=sort(df$abs_richness), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot Guassian')
abline(0,1,col="red")
modelr = glm(abs_richness ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), family = gaussian, data = df)
summary(modelr)
par(mfrow = c(2,2))
plot(modelr)
pure.guass.modelr <- glm(abs_richness ~ 1 , family = gaussian, data = df)
anova( pure.guass.modelr, modelr, test = "F")
# the guassian model shows perfect fitting, with coefficient statistically significant
# model using gaussian
modelr1 = glm(relative_richness ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), family = gaussian, data = df)
summary(modelr1)
par(mfrow = c(2,2))
plot(modelr1)
relative.guass.modelr <- glm(relative_richness ~ 1 , family = gaussian, data = df)
anova(relative.guass.modelr, modelr1, test = "F")
#worse then before, but still better than the abs_richness varaible
# model using gaussian
modelr2 = glm(richness_change_rate ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), family = gaussian, data = df)
summary(modelr2)
par(mfrow = c(2,2))
plot(modelr2)
rate.guass.modelr <- glm(richness_change_rate ~ 1 , family = gaussian, data = df)
anova(rate.guass.modelr, modelr2, test = "F")
#rate change is worse
# model using gaussian
modelr_selected2 <-step(modelr, scope=~.)
summary(modelr_selected2)
par(mfrow = c(2,2))
plot(modelr_selected2)
# only plot number matters, the treatment is not statistically significant
# model using gamma+ inverse link + abs_richness
abs_richness <- df$abs_richness + (-min(df$abs_richness) + 1)
gamma.modelr3=fitdist(abs_richness , "gamma")
gamma.modelr3
gamma.alphar3=gamma.modelr3$estimate[1]
gamma.betar3 =gamma.modelr3$estimate[2]
plot(gamma.modelr3)
n=length(abs_richness)
samp.pct3 <- (1:n-0.5)/n
qqplot(x=qgamma(samp.pct3,gamma.alphar3, gamma.betar3), y=sort(abs_richness), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot gamma')
abline(0,1,col="red")
modelr3 = glm(abs_richness + (-min(abs_richness) + 1) ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), family = Gamma(link = "inverse"), data = df)
summary(modelr3)
par(mfrow = c(2,2))
plot(modelr3)
# goodness of fit
qchisq(0.95,10)
P__disp(modelr3)
# adequate, better fit than abs_richness, but worse than guassian
# model using gamma + inverse link  relative_richness
gamma.modelr4=fitdist(df$relative_richness , "gamma")
gamma.modelr4
gamma.alphar4=gamma.modelr4$estimate[1]
gamma.betar4 =gamma.modelr4$estimate[2]
plot(gamma.modelr4)
n=length(df$relative_richness)
samp.pct4 <- (1:n-0.5)/n
qqplot(x=qgamma(samp.pct4,gamma.alphar4, gamma.betar4), y=sort(df$relative_richness), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot gamma')
abline(0,1,col="red")
modelr4 = glm(relative_richness + (-min(abs_richness) + 1) ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), family = Gamma(link = "inverse"), data = df)
summary(modelr4)
par(mfrow = c(2,2))
plot(modelr4)
# goodness of fit
qchisq(0.95,10)
P__disp(modelr4)
# Not adequate, worse fit than abs_richness, but worse than guassian
# model using gamma + inverse link + abs_richness
modelr_selected3 <-step(modelr3, scope=~.)
summary(modelr_selected3)
par(mfrow = c(2,2))
plot(modelr_selected3)
# model using piosson + inverse
poisson.model1=fitdist(ceiling(abs_richness), "pois")
poisson.model1
poisson.lambda=poisson.model1$estimate
plot(poisson.model1)
n=length(ceiling(abs_richness))
samp.pct <- (1:n-0.5)/n
qqplot(x=qpois(samp.pct,poisson.lambda), y=sort(ceiling(abs_richness)), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot Poisson')
abline(0,1,col="red")
# model using poisson
modelr5 = glm(abs_richness + (-min(abs_richness) + 1) ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), family = poisson, data = df)
summary(modelr5)
par(mfrow = c(2,2))
plot(modelr5)
qchisq(0.95,10)
P__disp(modelr5)
# adequate, could be choosed
# model using negbinom + inverse
nb.modelr1=fitdist(ceiling(abs_richness), "nbinom")
nb.modelr1
nb.sizer1=nb.modelr1$estimate[1]
nb.mur1 = nb.modelr1$estimate[2]
nb.probr1=nb.sizer1/(nb.sizer1+nb.mur1)
plot(nb.modelr1)
n=length(ceiling(abs_richness))
samp.pctr1 <- (1:n-0.5)/n
qqplot(x=qnbinom(samp.pctr1,nb.sizer1, nb.probr1), y=sort(ceiling(abs_richness)), xlab = 'Theoretical quantiles', ylab = 'Empirical quantiles', main='Q-Q plot Negative Binomial')
abline(0,1,col="red")
#fit the model
modelra6 = glm.nb(abs_relative_abundance + (-min(abs_relative_abundance) + 1) ~ Treatment  + as.factor(Plot_number) +as.factor(Quadrat_number), data = df)
summary(modelra6)
par(mfrow = c(2,2))
plot(modelr6)
