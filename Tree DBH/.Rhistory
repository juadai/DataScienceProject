zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 20, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 1-, cost = 0.3)
svmfit <- svm(X, Y, scale = FALSE, gamma = 10, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 9, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 8, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 5, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 4, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 3, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 2, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 1, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 1, cost = 1.5)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
plot_points <- function (svmfit) {
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
}
svmfit <- svm(X, Y, scale = FALSE, gamma = 1, cost = 1.5)
plot_points
plot_points(svmfit)
svmfit <- svm(X, Y, scale = FALSE, gamma = 2, cost = 1.5)
plot_points(svmfit)
svmfit <- svm(X, Y, scale = FALSE, gamma = 2, cost = 2)
plot_points(svmfit)
svmfit <- svm(X, Y, scale = FALSE, gamma = 2, cost = 0.75)
plot_points(svmfit)
svmfit <- svm(X, Y, scale = FALSE, gamma = 3, cost = 0.75)
plot_points(svmfit)
svmfit <- svm(X, Y, scale = FALSE, gamma = 1.5, cost = 0.75)
svmfit <- svm(X, Y, scale = FALSE, gamma = 1.5, cost = 0.75)
plot_points(svmfit)
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 0.75))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 1x))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 1))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 100))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 1000))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 500))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 300))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 200))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 100))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 110))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 110))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 120))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 120))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 200))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 150))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 200, probability=T))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 1000, probability=T))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 0.002))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 0.0001))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 0.05))
plot_points(svm(X, Y, scale = FALSE,
kernel='polynomial', degree=4, coef0=0.2,
gamma = 1, cost = 0.05))
plot_points(svm(X, Y, scale = FALSE,
kernel='polynomial', degree=4, coef0=0.2,
gamma = 1, cost = 10))
plot_points(svm(X, Y, scale = FALSE,
kernel='polynomial', degree=4, coef=0.2,
gamma = 1, cost = 10))
plot_points(svm(X, Y, scale = FALSE,
kernel='polynomial', degree=6, coef=0.2,
gamma = 1, cost = 10))
?seqe
?seq
output = tune.svm(X, Y, scale=F,
gamma=seq(0.001,100, length.out=50),
cost=seq(0.001,100, length.out=50))
output = tune.svm(X, Y, scale=F,
gamma=seq(0.001,100, length.out=5),
cost=seq(0.001,100, length.out=5))
output
plot_points(svm(X, Y, scale = FALSE,
gamma = 0.001, cost = 75))
plot_points(svm(X, Y, scale = FALSE,
tunecontrol=c(gamma = 0.001, cost = 75)))
output = tune.svm(X, Y, scale=F,
tunecontrol=c(gamma=seq(0.001,100, length.out=5),
cost=seq(0.001,100, length.out=5)))
output = tune.svm(X, Y, scale=F,
gamma=10^(1:3),
cost=10^(1:3))
output$best.parameters
tunecontrol=c(gamma = 10, cost = 10))
plot_points(svm(X, Y, scale = FALSE,
gamma = 10, cost = 10))
plot_points(svm(X, Y, scale = FALSE,
gamma = 1, cost = 10))
plot_points(svm(X, Y, scale = FALSE,
gamma = 1, cost = 1.5))
plot_points(svm(X, Y, scale = FALSE,
gamma = 1.5, cost = 1.5))
plot_points(svm(X, Y, scale = FALSE,
gamma = 1.5, cost = 1))
G_train_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtrainRain.txt'
G_test_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtestRain.txt'
train <- read.table(G_train_path, sep=',', header=T)
test <- read.table(G_test_path, sep=',', header=T)
train_X <- train[,1:365]
train_G <- train[,366]
test_X <- test[,1:365]
test_G <- test[,366]
qda_classifier <- qda(train_G~., data=train)
logistic_classifier <- glm(train_G ~ ., family='binomial', data=train)
summary(logistic_classifier)
X <- scale(train_X, scale=F)
pca <- prcomp(train_X)
Gamma <- pca$rotation
PComps <- t(t(Gamma)%*%t(X)) # Principal Components
pls_results <- plsr(train_G ~ ., data=data.frame(train_X))
library(pls)
pls_results <- plsr(train_G ~ ., data=data.frame(train_X))
Phi <- pls_results$projection
PLComps <- t(t(Phi)%*%t(X)) # Partial Least Squares Components
PLComps ==pls_results$projection
pls_results$projection
PLComps ==pls_results$scores
sum(PLComps!=pls_results$scores)
sum(PLComps!=pls_results$scores)
pls_results$projection
sum(PLComps!=pls_results$scores)
pls_results$scores
n <- length(train_G)
CV_PLS <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- qda(train_G~., data=PL[-i,])
p <- predict(q, PL[i,])$class
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
library(pls)
G_train_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtrainRain.txt'
G_test_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtestRain.txt'
train <- read.table(G_train_path, sep=',', header=T)
test <- read.table(G_test_path, sep=',', header=T)
train_X <- train[,1:365]
train_G <- train[,366]
test_X <- test[,1:365]
test_G <- test[,366]
qda_classifier <- qda(train_G~., data=train)
X <- scale(train_X, scale=F)
pca <- prcomp(train_X)
Gamma <- pca$rotation
PComps <- t(t(Gamma)%*%t(X)) # Principal Components
pls_results <- plsr(train_G ~ ., data=data.frame(train_X))
Phi <- pls_results$projection
PLComps <- t(t(Phi)%*%t(X)) # Partial Least Squares Components
sum(PLComps!=pls_results$scores)
n <- length(train_G)
CV_PLS <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- qda(train_G~., data=PL[-i,])
p <- predict(q, PL[i,])$class
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
library(MASS)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- qda(train_G~., data=PL[-i,])
p <- predict(q, PL[i,])$class
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
CV_PLS <- CV_PLS/n
which.min(CV_PLS)
plot(CV_PLS, type='l')
PLComps_CV <- data.frame(PLComps[,1:which.min(CV_PLS)])
View(PLComps_CV)
PLComps_CV <- data.frame(PLComps[,1:which.min(CV_PLS)])
PLS_qda <- qda(train_G~., data=PLComps_CV)
G_train_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtrainRain.txt'
G_test_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtestRain.txt'
train <- read.table(G_train_path, sep=',', header=T)
test <- read.table(G_test_path, sep=',', header=T)
train_X <- train[,1:365]
train_G <- train[,366]
test_X <- test[,1:365]
test_G <- test[,366]
qda_classifier <- qda(train_G~., data=train)
logistic_classifier <- glm(train_G ~ ., family='binomial', data=train)
X <- scale(train_X, scale=F)
pca <- prcomp(train_X)
Gamma <- pca$rotation
PComps <- t(t(Gamma)%*%t(X)) # Principal Components
pls_results <- plsr(train_G ~ ., data=data.frame(train_X))
Phi <- pls_results$projection
PLComps <- t(t(Phi)%*%t(X)) # Partial Least Squares Components
sum(PLComps!=pls_results$scores)
n <- length(train_G)
CV_PLS <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- qda(train_G~., data=PL[-i,])
p <- predict(q, PL[i,])$class
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
CV_PLS <- CV_PLS/n
CV_PLS
which.min(CV_PLS)
plot(CV_PLS, type='l')
PLComps_CV <- data.frame(PLComps[,1:which.min(CV_PLS)])
PLS_qda <- qda(train_G~., data=PLComps_CV)
summary(PLS_qda)
CV_PLS <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- glm(train_G~., family='binomial', data=PL[-i,])
p <- round(predict(q, PL[i,], type='response'))
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
CV_PLS <- CV_PLS/n
which.min(CV_PLS)
plot(CV_PLS, type='l')
PLComps_CV <- data.frame(PLComps[,1:which.min(CV_PLS)])
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV)
summary(PLS_logistic)
PLS_logistic <- glm(factor(train_G)~., family='binomial', data=PLComps_CV)
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV)
summary(PLS_logistic)
View(PLComps_CV)
View(PLS_logistic)
?glm
glm.control(maxit=100)
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV)
glm.control()
glm.control <- glm.control(maxit=100)
glm.control()
glm.control$maxit <- 100
glm.control()
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV,
control=glm.control(maxit=100))
summary(PLS_logistic)
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV)
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV,
control=glm.control(maxit=100))
library(lme4)
library(merTools)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
data = read.csv("./dataset/all_plots.csv", stringsAsFactors = FALSE)
DBHdata = data[1:9]
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.6), ]
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.0), ]
DBHdata$Treatment = factor(DBHdata$Treatment)
DBHdata$Large = factor(DBHdata$Large)
DBHdatarm = DBHdata[DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 1.25 & DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 0.9 & DBHdata$DBH.year.0 < 80, ]
DBHdatarm$InGap = (DBHdatarm$Treatment == "T2: Radial" & DBHdatarm$Large == "Yes")
DBHdatarm$InGap = factor(DBHdatarm$InGap)
mixed2.0 = lmer(log(DBH.year.6)~log(DBH.year.0)+Treatment+InGap+log(DBH.year.0):InGap+(1|Plot), data = DBHdatarm)
# Predict Control
X <- data.frame('DBH.year.0'=1:45,
'InGap'=FALSE,
'Plot'=3,
'Treatment'='Control')
PI <- predictInterval(merMod = mixed2.0, newdata = X,
level = 0.95, n.sims = 1000,
stat = "median", type="linear.prediction",
include.resid.var = TRUE)
# Plot Control vs. T1 (Not large trees)
X_T1 <- data.frame('DBH.year.0'=1:45,
'InGap'=FALSE,
'Plot'=3,
'Treatment'='T1: Gap')
PI_2 <- predictInterval(merMod = mixed2.0, newdata = X_T1,
level = 0.95, n.sims = 1000,
stat = "median", type="linear.prediction",
include.resid.var = TRUE)
plot(0, xlim=c(30,50), ylim=c(30,80))
lines(1:45, exp(PI$fit), type='l')
lines(1:45, exp(PI$upr), type='l', col='grey')
lines(1:45, exp(PI$lwr), type='l', col='grey')
lines(1:45, exp(PI_2$fit), type='l', col='red', cex=4)
lines(1:45, exp(PI_2$upr), type='l', lty='dashed', col='red')
lines(1:45, exp(PI_2$lwr), type='l', lty='dashed', col='red')
abline(v=45, lty='dashed')
plot(0, xlim=c(30,50), ylim=c(30,60))
lines(1:45, exp(PI$fit), type='l')
lines(1:45, exp(PI$upr), type='l', col='grey')
lines(1:45, exp(PI$lwr), type='l', col='grey')
lines(1:45, exp(PI_2$fit), type='l', col='red', cex=4)
lines(1:45, exp(PI_2$upr), type='l', lty='dashed', col='red')
lines(1:45, exp(PI_2$lwr), type='l', lty='dashed', col='red')
abline(v=45, lty='dashed')
# Plot control vs T2 (Not large trees)
X_T2 <- data.frame('DBH.year.0'=1:45,
'InGap'=FALSE,
'Plot'=3,
'Treatment'='T2: Radial')
X_ingap <- data.frame('DBH.year.0'=33:70,
'InGap'=TRUE,
'Plot'=3,
'Treatment'='T2: Radial')
PI_2 <- predictInterval(merMod = mixed2.0, newdata = X_ingap,
level = 0.95, n.sims = 1000,
stat = "median", type="linear.prediction",
include.resid.var = TRUE)
plot(0, xlim=c(30,50), ylim=c(30,80))
lines(1:45, exp(PI$fit), type='l')
lines(1:45, exp(PI$upr), type='l', col='grey')
lines(1:45, exp(PI$lwr), type='l', col='grey')
lines(33:70, exp(PI_2$fit), type='l', col='red', cex=4)
lines(33:70, exp(PI_2$upr), type='l', lty='dashed', col='red')
lines(33:70, exp(PI_2$lwr), type='l', lty='dashed', col='red')
abline(v=33, lty='dashed')
abline(v=45, lty='dashed')
plot(0, xlim=c(30,50), ylim=c(30,60))
lines(1:45, exp(PI$fit), type='l')
lines(1:45, exp(PI$upr), type='l', col='grey')
lines(1:45, exp(PI$lwr), type='l', col='grey')
lines(33:70, exp(PI_2$fit), type='l', col='red', cex=4)
lines(33:70, exp(PI_2$upr), type='l', lty='dashed', col='red')
lines(33:70, exp(PI_2$lwr), type='l', lty='dashed', col='red')
abline(v=33, lty='dashed')
abline(v=45, lty='dashed')
summary(DBHdatarm[DBHdatarm$Large=='Yes', 'DBH.year.6'])
par(bg='black')
plot(0, xlim=c(30,50), ylim=c(30,60))
lines(1:45, exp(PI$fit), type='l')
lines(1:45, exp(PI$upr), type='l', col='grey')
lines(1:45, exp(PI$lwr), type='l', col='grey')
lines(1:45, exp(PI_2$fit), type='l', col='red', cex=4)
lines(1:45, exp(PI_2$upr), type='l', lty='dashed', col='red')
lines(1:45, exp(PI_2$lwr), type='l', lty='dashed', col='red')
abline(v=45, lty='dashed')
par(bg='#fffdf3')
plot(0, xlim=c(30,50), ylim=c(30,80))
lines(1:45, exp(PI$fit), type='l')
lines(1:45, exp(PI$upr), type='l', col='grey')
lines(1:45, exp(PI$lwr), type='l', col='grey')
lines(1:45, exp(PI_2$fit), type='l', col='red', cex=4)
lines(1:45, exp(PI_2$upr), type='l', lty='dashed', col='red')
lines(1:45, exp(PI_2$lwr), type='l', lty='dashed', col='red')
abline(v=45, lty='dashed')
X_ingap <- data.frame('DBH.year.0'=33:70,
'InGap'=TRUE,
'Plot'=3,
'Treatment'='T2: Radial')
PI_2 <- predictInterval(merMod = mixed2.0, newdata = X_ingap,
level = 0.95, n.sims = 1000,
stat = "median", type="linear.prediction",
include.resid.var = TRUE)
plot(0, xlim=c(30,50), ylim=c(30,60))
lines(1:45, exp(PI$fit), type='l')
lines(1:45, exp(PI$upr), type='l', col='grey')
lines(1:45, exp(PI$lwr), type='l', col='grey')
lines(33:70, exp(PI_2$fit), type='l', col='red', cex=4)
lines(33:70, exp(PI_2$upr), type='l', lty='dashed', col='red')
lines(33:70, exp(PI_2$lwr), type='l', lty='dashed', col='red')
abline(v=33, lty='dashed')
abline(v=45, lty='dashed')
summary(DBHdatarm[DBHdatarm$Large=='Yes', 'DBH.year.6'])
summary(DBHdatarm[DBHdatarm$Large=='No', 'DBH.year.6'])
alpha <- coef(mixed2.0)$Plot[,'(Intercept)']
summary(alpha)
exp(coef(mixed2.0)$Plot)
bootMer()
par(bg='#dddddd')
plot(0, xlim=c(30,50), ylim=c(30,80))
lines(1:45, exp(PI$fit), type='l')
lines(1:45, exp(PI$upr), type='l', col='grey')
lines(1:45, exp(PI$lwr), type='l', col='grey')
lines(1:45, exp(PI_2$fit), type='l', col='red', cex=4)
lines(1:45, exp(PI_2$upr), type='l', lty='dashed', col='red')
lines(1:45, exp(PI_2$lwr), type='l', lty='dashed', col='red')
