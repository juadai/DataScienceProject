PLS_logistic <- glm(factor(train_G)~., family='binomial', data=PLComps_CV)
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV)
summary(PLS_logistic)
View(PLComps_CV)
View(PLS_logistic)
?glm
glm.control(maxit=100)
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV)
glm.control()
glm.control <- glm.control(maxit=100)
glm.control()
glm.control$maxit <- 100
glm.control()
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV,
control=glm.control(maxit=100))
summary(PLS_logistic)
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV)
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV,
control=glm.control(maxit=100))
# Load data
library(rstudioapi)
library(pROC)
library(lme4)
library(lmerTest)
setwd(dirname(getActiveDocumentContext()$path))
diversity_df <- read.csv('../dataset/tables/species_divers_quadrats.csv')
diversity_df_plot <- read.csv('../contingency tables/output/diversity/species_divers_plots.csv')
diversity_df_treat <- read.csv('../contingency tables/output/diversity/species_divers_treatments.csv')
# Treatments, Plot numbers, Quadrat numbers, Life forms as factors
diversity_df$Treatment <- factor(diversity_df$Treatment)
diversity_df$Plot.Number <- factor(diversity_df$Plot.Number)
diversity_df$Quadrat.Number <- factor(diversity_df$Quadrat.Number)
# Convert Fenced, Gap columns to boolean
diversity_df$Gap <- diversity_df$Gap=='True'
diversity_df$Fenced <- diversity_df$Fenced=='True'
diversity_df_plot$Gap <- diversity_df_plot$Gap=='True'
diversity_df_plot$Fenced <- diversity_df_plot$Fenced=='True'
# Remove null rows
diversity_df <- na.omit(diversity_df)
diversity_df_plot <- na.omit(diversity_df_plot)
diversity_Y3_01 <- glm(X3 ~ (X0 + Treatment + Gap + Fenced)^2,
data=diversity_df)
summary(diversity_Y3_01)
diversity_Y3_02 <- step(diversity_Y3_01)
summary(diversity_Y3_02)
anova(diversity_Y3_02, diversity_Y3_01, test='Chi')
plot(diversity_Y3_02)
# Can't take the smaller model - Treatment, Treatment:Gap, Fenced are significant
summary(diversity_Y3_02)
library(rstudioapi)
library(lme4)
library(lmerTest)
setwd(dirname(getActiveDocumentContext()$path))
df <- read.csv('../dataset/tables/abundance_species_for_analysis.csv')
unique(df['Life.Form'])
colnames(df)
#grouped <- aggregate(cbind(df$X0,df$X3,df$X6),
#                     list(df$Life.Form), FUN=sum)
#grouped <- grouped[order(grouped$V1, decreasing=T),]
#rownames(grouped) <- grouped$Group.1
df$Plot.Number <- factor(df$Plot.Number)
df$Treatment <- factor(df$Treatment)
df$Fenced <- df$Fenced=="True"
df$Gap <- df$Gap=="True"
# Remove rows with all abundance = 0
df <- df[!(df$X0 == 0 & df$X3 == 0 & df$X6 == 0),]
df_Y0 <- df[,c(1:7,8)]
df_Y0 <- cbind(df_Y0, 0)
colnames(df_Y0)[8:9] <- c("X", 'Year')
df_Y3 <- df[,c(1:7,9)]
df_Y3 <- cbind(df_Y3, 3)
colnames(df_Y3)[8:9] <- c("X", 'Year')
df_Y6 <- df[,c(1:7,10)]
df_Y6 <- cbind(df_Y6, 6)
colnames(df_Y6)[8:9] <- c("X", 'Year')
df_prime <- rbind(df_Y0,df_Y3,df_Y6)
df_prime$Year2 <- df_prime$Year^2
df_prime$log_X <- df_prime$X
df_prime[df_prime$X==0, 'log_X'] <- 0.1
df_prime$log_X <- log(df_prime$log_X)
# LF = Large Forb/herb
df_LF <- df_prime[df_prime$Life.Form=="Large Forb/Herb",]
LF_m1 <- lmer(X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_LF)
LF_m2 <- get_model(step(LF_m1))
summary(LF_m2)
# Exclude rows where abundance = 0
df_LF <- df_LF[df_LF$log_X >= 0,]
LF_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_LF)
LF_m4 <- get_model(step(LF_m3))
summary(LF_m4)
plot(LF_m4)
RSS <- sum((df_LF$log_X - fitted(LF_m4, df_LF))^2)
TSS <- sum((df_LF$log_X - mean(df_LF$log_X))^2)
R2 <- 1-RSS/TSS
R2
# MTG = Medium Tufted Grass
df_MTG <- df_prime[df_prime$Life.Form=="Medium Tufted grass/sedge",]
MTG_m1 <- lmer(X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_MTG)
MTG_m2 <- get_model(step(MTG_m1))
summary(MTG_m2)
plot(MTG_m2)
# Exclude rows where abundance = 0
df_MTG <- df_MTG[df_MTG$log_X >= 0,]
MTG_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_MTG)
MTG_m4 <- get_model(step(MTG_m3))
summary(MTG_m4)
plot(MTG_m4)
RSS <- sum((df_MTG$log_X - fitted(MTG_m4, df_MTG))^2)
TSS <- sum((df_MTG$log_X - mean(df_MTG$log_X))^2)
R2 <- 1-RSS/TSS
R2
# MNTG = Medium Non-Tufted Grass
df_MNTG <- df_prime[df_prime$Life.Form=="Medium Non-tufted grass/sedge",]
MNTG_m1 <- lmer(X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_MNTG)
MNTG_m2 <- get_model(step(MNTG_m1))
summary(MNTG_m2)
plot(MNTG_m2)
# Exclude rows where abundance = 0
df_MNTG <- df_MNTG[df_MNTG$log_X >= 0,]
MNTG_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_MNTG)
MNTG_m4 <- get_model(step(MNTG_m3))
summary(MNTG_m4)
plot(MNTG_m4)
RSS <- sum((df_MNTG$log_X - fitted(MNTG_m4, df_MNTG))^2)
TSS <- sum((df_MNTG$log_X - mean(df_MNTG$log_X))^2)
R2 <- 1-RSS/TSS
R2
# load original data
DBHdata = read.csv("datasets/all_plots.csv", stringsAsFactors = FALSE)
# load original data
DBHdata = read.csv("/Users/nickjolly/Desktop/tfn/DataScienceProject/Tree DBH/dataset/all_plots.csv", stringsAsFactors = FALSE)
sapply(DBHdata[c(2,3,4,5,8,9,10,11,12,13,14,15)], unique)
# assign correct values in the first 4 hollow columns: "0/0" should be "0", "yes" and "Yes " should both be "Yes"
DBHdata[DBHdata$Hollows.Class.1.year.0 == "0/0", 10:12] = "0"
DBHdata[DBHdata$Hollows.Class.1.year.6 == "yes" | DBHdata$Hollows.Class.1.year.6 == "Yes ", "Hollows.Class.1.year.6"] = "Yes"
# As "Hollows.Class.1.year.6" can't be converted to integer (not sure what value substitute "Yes"), further conversion for integer-representation: "0.0" to "0", "1.0" to "1", "2.0" to "2"
DBHdata[DBHdata$Hollows.Class.1.year.6 == "0.0", "Hollows.Class.1.year.6"] = "0"
DBHdata[DBHdata$Hollows.Class.1.year.6 == "1.0", "Hollows.Class.1.year.6"] = "1"
DBHdata[DBHdata$Hollows.Class.1.year.6 == "2.0", "Hollows.Class.1.year.6"] = "2"
sapply(DBHdata[10:15], unique)
# blank "Tree.Number"
DBHdata[DBHdata$Tree.Number == "", ]
DBHdata = DBHdata[DBHdata$Tree.Number != "", ] # doesn't have any other information, remove rows
# blank "Large"
DBHdata[DBHdata$Large == "", "Tree.Number"]
DBHdata[DBHdata$Large == "", "Large"] = "No" # assume "No", where there's no "Yes"
# blank "Alive.at.year.6"
DBHdata[DBHdata$Alive.at.year.6 == "", 1:7]
# 20 rows with blank "Alive.at.year.6" have valid values for "DBH.year.6", assume they have "Yes" for "Alive.at.year.6"
DBHdata[DBHdata$Alive.at.year.6 == "" & !(is.na(DBHdata$DBH.year.6)), "Alive.at.year.6"] = "Yes"
# the rest rows with blank "Alive.at.year.6" have NA for "DBH.year.6", not sure whether the trees are not alive, or just missing records in year6, so no modification.
# NA in "DBH.year.6", no modification
DBHdata[is.na(DBHdata$DBH.year.6), 1:7]
# 15 NAs for "DBH.year.6", 14 rows are the rows where "Alive.at.year.6" is blank, and one exception.
# NA in "DBH.year.0", no modification
DBHdata[is.na(DBHdata$DBH.year.0), 1:7] # 7 NAs for "DBH.year.0"
# assign 0 for NA in the 6 hollow-columns
DBHdata[DBHdata$Hollows.Class.1.year.0=="", "Hollows.Class.1.year.0"]="0"
DBHdata[DBHdata$Hollows.Class.2.year.0=="", "Hollows.Class.2.year.0"]="0"
DBHdata[DBHdata$Hollows.Class.3.year.0=="", "Hollows.Class.3.year.0"]="0"
DBHdata[DBHdata$Hollows.Class.1.year.6=="", "Hollows.Class.1.year.6"]="0"
DBHdata[is.na(DBHdata$Hollows.Class.2.year.6), "Hollows.Class.2.year.6"] = 0
DBHdata[is.na(DBHdata$Hollows.Class.3.year.6), "Hollows.Class.3.year.6"] = 0
sapply(DBHdata[10:15], unique)
# prepare data for boxplot
DBHdata$Tree.growth = DBHdata$DBH.year.6 - DBHdata$DBH.year.0
T1data = DBHdata[DBHdata$Treatment == "T1: Gap", ]
T2data = DBHdata[DBHdata$Treatment == "T2: Radial", ]
Controldata = DBHdata[DBHdata$Treatment == "Control", ]
at = c(1, 3.5, 6, 8.5, 1.5, 4, 6.5, 9)
boxplot(T1data$DBH.year.0~T1data$Plot, at = c(1, 3.5, 6, 8.5), boxwex = 0.5, xlab = "T1: Gap plot number", ylab = "DBH in year0 VS year6", xlim = c(0, 10), ylim = c(15, 100), col = "light grey")
boxplot(T1data$DBH.year.6~T1data$Plot, add = TRUE, at = c(1.5, 4, 6.5, 9), boxwex = 0.5, xaxt = "n", col = "dark grey")
plotnum = c(1, 8, 10, 12)
for (i in c(1, 2, 3, 4)) {
text(x = at[i]-0.5, y = fivenum(T1data[T1data$Plot == plotnum[i], "DBH.year.0"]), labels = fivenum(T1data[T1data$Plot == plotnum[i], "DBH.year.0"]), cex = 0.6)
text(x = at[i+4]+0.5, y = fivenum(T1data[T1data$Plot == plotnum[i], "DBH.year.6"]), labels = fivenum(T1data[T1data$Plot == plotnum[i], "DBH.year.6"]), cex = 0.6)
}
legend("topright", legend = c("year0", "year6"), fill = c("light grey", "dark grey"))
boxplot(T2data$DBH.year.0~T2data$Plot, at = c(1, 3.5, 6, 8.5), boxwex = 0.5, xlab = "T2: Radial plot number", ylab = "DBH in year0 VS year6", xlim = c(0, 10), ylim = c(15, 100), col = "light grey")
boxplot(T2data$DBH.year.6~T2data$Plot, add = TRUE, at = c(1.5, 4, 6.5, 9), boxwex = 0.5, xaxt = "n", col = "dark grey")
plotnum = c(3, 5, 7, 9)
for (i in c(1, 2, 3, 4)) {
text(x = at[i]-0.5, y = fivenum(T2data[T2data$Plot == plotnum[i], "DBH.year.0"]), labels = fivenum(T2data[T2data$Plot == plotnum[i], "DBH.year.0"]), cex = 0.6)
text(x = at[i+4]+0.5, y = fivenum(T2data[T2data$Plot == plotnum[i], "DBH.year.6"]), labels = round(fivenum(T2data[T2data$Plot == plotnum[i], "DBH.year.6"]), 2), cex = 0.6)
}
legend("topright", legend = c("year0", "year6"), fill = c("light grey", "dark grey"))
boxplot(Controldata$DBH.year.0~Controldata$Plot, at = c(1, 3.5, 6, 8.5), boxwex = 0.5, xlab = "Control treatment plot number", ylab = "DBH in year0 VS year6", xlim = c(0, 10), ylim = c(15, 100), col = "light grey")
boxplot(Controldata$DBH.year.6~Controldata$Plot, add = TRUE, at = c(1.5, 4, 6.5, 9), boxwex = 0.5, xaxt = "n", col = "dark grey")
plotnum = c(2, 4, 6, 11)
for (i in c(1, 2, 3, 4)) {
text(x = at[i]-0.5, y = fivenum(Controldata[Controldata$Plot == plotnum[i], "DBH.year.0"]), labels = round(fivenum(Controldata[Controldata$Plot == plotnum[i], "DBH.year.0"]), 2), cex = 0.6)
text(x = at[i+4]+0.5, y = fivenum(Controldata[Controldata$Plot == plotnum[i], "DBH.year.6"]), labels = round(fivenum(Controldata[Controldata$Plot == plotnum[i], "DBH.year.6"]), 2), cex = 0.6)
}
legend("topright", legend = c("year0", "year6"), fill = c("light grey", "dark grey"))
\
data = read.csv("/Users/nickjolly/Desktop/tfn/DataScienceProject/Tree DBH/dataset/all_plots.csv", stringsAsFactors = FALSE)
# blank "Large", assume "No" where it's blank
DBHdata[DBHdata$Large == "", "Tree.Number"]
DBHdata[DBHdata$Large == "", "Large"] = "No"
DBHdata = data[1:9]
# blank "Large", assume "No" where it's blank
DBHdata[DBHdata$Large == "", "Tree.Number"]
DBHdata[DBHdata$Large == "", "Large"] = "No"
# remove rows with NA in "DBH.year.6"
DBHdata[is.na(DBHdata$DBH.year.6), 1:7] # 9 NAs for "DBH.year.6"
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.6), ]
# remove rows with NA in "DBH.year.0"
DBHdata[is.na(DBHdata$DBH.year.0), 1:7] # 2 NAs for "DBH.year.0"
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.0), ]
# NA in "Class.year.0" and NA in "Class.year.6", no modification
DBHdata[is.na(DBHdata$Class.year.0) | is.na(DBHdata$Class.year.6), ]
# both in Plot5(T2: Radial), Tree.Number 148, 149, they have extremely large DBH.
DBHdata$Treatment = factor(DBHdata$Treatment)
DBHdata$Large = factor(DBHdata$Large)
DBHdata[DBHdata$DBH.year.6 <= DBHdata$DBH.year.0, ]
DBHpositive = DBHdata[DBHdata$DBH.year.6 > DBHdata$DBH.year.0, ]
par(mfrow=c(2,2))
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p")
plot(log(DBHdata$DBH.year.0), log(DBHdata$DBH.year.6), type = "p")
plot(DBHpositive$DBH.year.0, DBHpositive$DBH.year.6, type = "p")
plot(log(DBHpositive$DBH.year.0), log(DBHpositive$DBH.year.6), type = "p")
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = DBHdata$Treatment)
plot(log(DBHdata$DBH.year.0), log(DBHdata$DBH.year.6), type = "p", col = DBHdata$Treatment)
plot(DBHpositive$DBH.year.0, DBHpositive$DBH.year.6, type = "p", col = DBHpositive$Treatment)
plot(log(DBHpositive$DBH.year.0), log(DBHpositive$DBH.year.6), type = "p", col = DBHpositive$Treatment)
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = DBHdata$Large)
plot(log(DBHdata$DBH.year.0), log(DBHdata$DBH.year.6), type = "p", col = DBHdata$Large)
plot(DBHpositive$DBH.year.0, DBHpositive$DBH.year.6, type = "p", col = DBHpositive$Large)
plot(log(DBHpositive$DBH.year.0), log(DBHpositive$DBH.year.6), type = "p", col = DBHpositive$Large)
# points outside the main group
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6/DBHdata$DBH.year.0, type = "p", col = factor(DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80))
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = factor(DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80))
DBHdata[DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80, ]
# remove these outliers
DBHdatarm = DBHdata[DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 1.25 & DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 0.9 & DBHdata$DBH.year.0 < 80, ]
DBHpositiverm = DBHpositive[DBHpositive$DBH.year.6/DBHpositive$DBH.year.0 < 1.25 & DBHpositive$DBH.year.0 < 80, ]
cor(DBHdata$DBH.year.0, DBHdata$DBH.year.6)
cor(log(DBHdata$DBH.year.0), log(DBHdata$DBH.year.6))
cor(DBHpositive$DBH.year.0, DBHpositive$DBH.year.6)
cor(log(DBHpositive$DBH.year.0), log(DBHpositive$DBH.year.6))
cor(DBHdatarm$DBH.year.0, DBHdatarm$DBH.year.6)
cor(log(DBHdatarm$DBH.year.0), log(DBHdatarm$DBH.year.6))
cor(DBHpositiverm$DBH.year.0, DBHpositiverm$DBH.year.6)
cor(log(DBHpositiverm$DBH.year.0), log(DBHpositiverm$DBH.year.6))
shapiro.test(DBHdata$DBH.year.6)
shapiro.test(log(DBHdata$DBH.year.6))
shapiro.test(DBHpositive$DBH.year.6)
shapiro.test(log(DBHpositive$DBH.year.6))
shapiro.test(DBHdatarm$DBH.year.6)
shapiro.test(log(DBHdatarm$DBH.year.6))
shapiro.test(DBHpositiverm$DBH.year.6)
shapiro.test(log(DBHpositiverm$DBH.year.6)) # closest to normal
library(car)
leveneTest(DBH.year.6~Treatment, data = DBHdata)
leveneTest(DBH.year.6~Large, data = DBHdata)
leveneTest(log(DBH.year.6)~Treatment, data = DBHdata) # constant variance
leveneTest(log(DBH.year.6)~Large,data = DBHdata) # different variance
leveneTest(DBH.year.6~Treatment, data = DBHpositive) # constant variance
leveneTest(DBH.year.6~Large, data = DBHpositive) # constant variance
leveneTest(log(DBH.year.6)~Treatment, data = DBHpositive) # 2nd most constant variance
leveneTest(log(DBH.year.6)~Large, data = DBHpositive) # 3rd most different variance
leveneTest(DBH.year.6~Treatment, data = DBHdatarm)
leveneTest(DBH.year.6~Large, data = DBHdatarm) # constant variance
leveneTest(log(DBH.year.6)~Treatment, data = DBHdatarm) # 3rd most constant variance
leveneTest(log(DBH.year.6)~Large,data = DBHdatarm) # 2nd most different variance
leveneTest(DBH.year.6~Treatment, data = DBHpositiverm) # constant variance
leveneTest(DBH.year.6~Large, data = DBHpositiverm) # constant variance
leveneTest(log(DBH.year.6)~Treatment, data = DBHpositiverm) # most constant variance
leveneTest(log(DBH.year.6)~Large, data = DBHpositiverm) # most different variance
library(fitdistrplus)
descdist(log(DBHdata$DBH.year.6))
descdist(log(DBHpositive$DBH.year.6)) # close to normal
descdist(log(DBHdatarm$DBH.year.6)) # could be considered as normal
descdist(log(DBHpositiverm$DBH.year.6)) # could be considered as normal
descdist(DBHdatarm$DBH.year.6)
descdist(DBHpositiverm$DBH.year.6)
# best model derived from DBH.year.6~DBH.year.0*Treatment*Large
glm0 = glm(DBH.year.6~DBH.year.0+Treatment+Large+DBH.year.0:Large+Treatment:Large, data = DBHdata)
summary(glm0)
tss = sum((DBHdata$DBH.year.6-mean(DBHdata$DBH.year.6))^2) #TSS
rss = sum((DBHdata$DBH.year.6-glm0$fitted.values)^2) #RSS
(tss-rss)/tss #R^2 = 0.9467556
par(mfrow=c(2,2))
plot(glm0)
par(mfrow=c(1,1))
plot(DBHdata$DBH.year.6, glm0$fitted.values, type = "p", col = DBHdata$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
abline(0,1)
plot(DBHdata$DBH.year.6, glm0$fitted.values, type = "p", col = DBHdata$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
abline(0,1)
glm1.0 = glm(DBH.year.6~DBH.year.0+Treatment+Large+DBH.year.0:Large+Treatment:Large, data = DBHpositiverm)
summary(glm1.0)
tss = sum((DBHpositiverm$DBH.year.6-mean(DBHpositiverm$DBH.year.6))^2) #TSS
rss = sum((DBHpositiverm$DBH.year.6-glm1.0$fitted.values)^2) #RSS
(tss-rss)/tss #R^2 = 0.9801139
par(mfrow=c(2,2))
plot(glm1.0)
par(mfrow=c(1,1))
plot(DBHpositiverm$DBH.year.6, glm1.0$fitted.values, type = "p", col = DBHpositiverm$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
abline(0,1)
plot(DBHpositiverm$DBH.year.6, glm1.0$fitted.values, type = "p", col = DBHpositiverm$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
abline(0,1)
glm1.1 = glm(log(DBH.year.6)~log(DBH.year.0)+Treatment+Large+log(DBH.year.0):Large+Treatment:Large, data = DBHpositive)
summary(glm1.1)
tss = sum((log(DBHpositive$DBH.year.6)-mean(log(DBHpositive$DBH.year.6)))^2) #TSS
rss = sum((log(DBHpositive$DBH.year.6)-glm1.1$fitted.values)^2) #RSS
(tss-rss)/tss #R^2 = 0.9554377
par(mfrow=c(2,2))
plot(glm1.1)
par(mfrow=c(1,1))
plot(log(DBHpositive$DBH.year.6), glm1.1$fitted.values, type = "p", col = DBHpositive$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
abline(0,1)
plot(log(DBHpositive$DBH.year.6), glm1.1$fitted.values, type = "p", col = DBHpositive$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
abline(0,1)
glm1.2 = glm(log(DBH.year.6)~log(DBH.year.0)+Treatment+Large+log(DBH.year.0):Large+Treatment:Large, data = DBHdatarm)
summary(glm1.2)
anova(glm1.2)
tss = sum((log(DBHdatarm$DBH.year.6)-mean(log(DBHdatarm$DBH.year.6)))^2) #TSS
rss = sum((log(DBHdatarm$DBH.year.6)-glm1.2$fitted.values)^2) #RSS
(tss-rss)/tss #R^2 = 0.9783684
par(mfrow=c(2,2))
plot(glm1.2)
par(mfrow=c(1,1))
plot(log(DBHdatarm$DBH.year.6), glm1.2$fitted.values, type = "p", col = DBHdatarm$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
abline(0,1)
plot(log(DBHdatarm$DBH.year.6), glm1.2$fitted.values, type = "p", col = DBHdatarm$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
abline(0,1)
glm1.3 = glm(log(DBH.year.6)~log(DBH.year.0)+Treatment+Large+log(DBH.year.0):Large+Treatment:Large, data = DBHpositiverm)
summary(glm1.3)
anova(glm1.3)
tss = sum((log(DBHpositiverm$DBH.year.6)-mean(log(DBHpositiverm$DBH.year.6)))^2) #TSS
rss = sum((log(DBHpositiverm$DBH.year.6)-glm1.3$fitted.values)^2) #RSS
(tss-rss)/tss #R^2 = 0.9826943
par(mfrow=c(2,2))
plot(glm1.3)
par(mfrow=c(1,1))
plot(log(DBHpositiverm$DBH.year.6), glm1.3$fitted.values, type = "p", col = DBHpositiverm$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
abline(0,1)
plot(log(DBHpositiverm$DBH.year.6), glm1.3$fitted.values, type = "p", col = DBHpositiverm$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
abline(0,1)
par(mfrow=c(3,4))
for (i in 1:12) {
plot(DBHdata[DBHdata$Plot == i, "DBH.year.0"], DBHdata[DBHdata$Plot == i, "DBH.year.6"], xlab = paste("Plot", i, "DBH.year.0"), ylab = paste("Plot", i, "DBH.year.6"), xlim = c(20,70), ylim = c(20,70), col = DBHdata[DBHdata$Plot == i, "Treatment"])
abline(0,1)
}
for (i in 1:12) {
plot(log(DBHdata[DBHdata$Plot == i, "DBH.year.0"]), log(DBHdata[DBHdata$Plot == i, "DBH.year.6"]), xlab = paste("Plot", i, "log(DBH.year.0)"), ylab = paste("Plot", i, "log(DBH.year.6)"), xlim = c(3.0,4.3), ylim = c(3.0, 4.3), col = DBHdata[DBHdata$Plot == i, "Treatment"])
abline(0,1)
}
mixed1.0 = lmer(log(DBH.year.6)~log(DBH.year.0)+Large+Treatment+log(DBH.year.0):Large+Treatment:Large+(1|Plot), data = DBHdatarm)
summary(mixed1.0)
VarCorr(mixed1.0)
y.hat <- fitted(mixed1.0) # Fitted values
int.hat <- ranef(mixed1.0)[[1]][[1]] # Predicted intercepts
res.hat <- residuals(mixed1.0) # Estimated residuals
tss = sum((log(DBHdatarm$DBH.year.6)-mean(log(DBHdatarm$DBH.year.6)))^2) #TSS
rss = sum((log(DBHdatarm$DBH.year.6)-y.hat)^2) #RSS
(tss-rss)/tss #R^2 = 0.9800758
DBHdata$InGap = (DBHdata$Treatment == "T2: Radial" & DBHdata$Large == "Yes")
DBHdatarm$InGap = (DBHdatarm$Treatment == "T2: Radial" & DBHdatarm$Large == "Yes")
DBHpositive$InGap = (DBHpositive$Treatment == "T2: Radial" & DBHpositive$Large == "Yes")
DBHpositiverm$InGap = (DBHpositiverm$Treatment == "T2: Radial" & DBHpositiverm$Large == "Yes")
DBHdata$InGap = factor(DBHdata$InGap)
DBHdatarm$InGap = factor(DBHdatarm$InGap)
DBHpositive$InGap = factor(DBHpositive$InGap)
DBHpositiverm$InGap = factor(DBHpositiverm$InGap)
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = DBHdata$InGap)
legend("bottomright", legend = c("not InGap", "InGap"), fill = c("black", "red"))
plot(DBHdata[DBHdata$Treatment == "T2: Radial", "DBH.year.0"], DBHdata[DBHdata$Treatment == "T2: Radial", "DBH.year.6"], type = "p", col = DBHdata[DBHdata$Treatment == "T2: Radial", "InGap"])
legend("bottomright", legend = c("T2 not InGap", "InGap"), fill = c("black", "red"))
plot(DBHdata[DBHdata$Treatment == "T1: Gap" | DBHdata$InGap == TRUE, "DBH.year.0"], DBHdata[DBHdata$Treatment == "T1: Gap" | DBHdata$InGap == TRUE, "DBH.year.6"], type = "p", col = DBHdata[DBHdata$Treatment == "T1: Gap" | DBHdata$InGap == TRUE, "InGap"])
legend("bottomright", legend = c("T1", "InGap"), fill = c("black", "red"))
plot(DBHdata[DBHdata$Treatment == "Control" | DBHdata$InGap == TRUE, "DBH.year.0"], DBHdata[DBHdata$Treatment == "Control" | DBHdata$InGap == TRUE, "DBH.year.6"], type = "p", col = DBHdata[DBHdata$Treatment == "Control" | DBHdata$InGap == TRUE, "InGap"])
legend("bottomright", legend = c("Control", "InGap"), fill = c("black", "red"))
leveneTest(DBH.year.6~InGap, data = DBHdata)
leveneTest(log(DBH.year.6)~InGap, data = DBHdata)
leveneTest(DBH.year.6~InGap, data = DBHdatarm)
leveneTest(log(DBH.year.6)~InGap, data = DBHdatarm)
leveneTest(DBH.year.6~InGap, data = DBHpositive)
leveneTest(log(DBH.year.6)~InGap, data = DBHpositive)
leveneTest(DBH.year.6~InGap, data = DBHpositiverm)
leveneTest(log(DBH.year.6)~InGap, data = DBHpositiverm)
mixed2.0 = lmer(log(DBH.year.6)~log(DBH.year.0)+Treatment+InGap+log(DBH.year.0):InGap+(1|Plot), data = DBHdatarm)
summary(mixed2.0)
VarCorr(mixed2.0)
y.hat <- fitted(mixed2.0) # Fitted values
int.hat <- ranef(mixed2.0)[[1]][[1]] # Predicted intercepts
res.hat <- residuals(mixed2.0) # Estimated residuals
tss = sum((log(DBHdatarm$DBH.year.6)-mean(log(DBHdatarm$DBH.year.6)))^2) #TSS
rss = sum((log(DBHdatarm$DBH.year.6)-y.hat)^2) #RSS
(tss-rss)/tss #R^2 = 0.9801595
summary(mixed2.0)
0.986722+0.007783
0.986722+2*0.007783
0.986722+1.96*0.007783
coef(mixed2.0)
coef(mixed2.0)$Plot
coef(mixed2.0)$Plot[1]
mean(coef(mixed2.0)$Plot[1])
coef(mixed2.0)$Plot[1]
as.numeric(coef(mixed2.0)$Plot[1]
)
as.vector(coef(mixed2.0)$Plot[1])
mean(as.vector(coef(mixed2.0)$Plot[1]))
alpha <- coef(mixed2.0)$Plot[1]
alpha
alpha$`(Intercept)`
alpha = alpha$`(Intercept)`
mean(alpha)
max(alpha)
summary(alpha)
exp(alpha)
summary(exp(alpha))
View(DBHdatarm)
c(1.061,1.09)*25
c(1.061,1.09)*50
1.06+.04, 1.09+0.04)
c(1.06+.04, 1.09+0.04)
summary(exp(alpha+.039))
c(1.103, 1.133)*25
c(1.103, 1.133)*50
summary(exp(alpha+.029))
1.09*25
1.12*25
1.09*50
1.12*50
DBHdata[DBHdata$Large==T]
DBHdata[DBHdata$Large==T,]
DBHdata[DBHdata$Large=='Yes',]
summary(DBHdata[DBHdata$Large=='Yes','DBH.year.0'])
summary(DBHdata[DBHdata$Large=='No','DBH.year.0'])
1.1*35
1.13*35
0.039+0.452
35^0.89
summary(alpha)
exp(c(min(alpha) + 0.491, max(alpha)+0.491))
exp(c(min(alpha) + 0.491, max(alpha)+0.491))*35^.89
exp(c(min(alpha) + 0.491, max(alpha)+0.491))*50^.89
exp(c(min(alpha) + 0.491, max(alpha)+0.491))*75^.89
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
data = read.csv("./dataset/all_plots.csv", stringsAsFactors = FALSE)
DBHdata = data[1:9]
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.6), ]
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.0), ]
DBHdata$Treatment = factor(DBHdata$Treatment)
DBHdata$Large = factor(DBHdata$Large)
DBHdatarm = DBHdata[DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 1.25 & DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 0.9 & DBHdata$DBH.year.0 < 80, ]
DBHdatarm$InGap = (DBHdatarm$Treatment == "T2: Radial" & DBHdatarm$Large == "Yes")
DBHdatarm$InGap = factor(DBHdatarm$InGap)
mixed2.0 = lmer(log(DBH.year.6)~log(DBH.year.0)+Treatment+InGap+log(DBH.year.0):InGap+(1|Plot), data = DBHdatarm)
X <- data.frame('DBH.year.0'=1:100,
'InGap'=FALSE,
'Plot'=6,
'Treatment'='Control')
PI <- predictInterval(merMod = mixed2.0, newdata = X,
level = 0.95, n.sims = 1000,
stat = "median", type="linear.prediction",
include.resid.var = TRUE)
library(lme4)
library(merTools)
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
data = read.csv("./dataset/all_plots.csv", stringsAsFactors = FALSE)
DBHdata = data[1:9]
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.6), ]
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.0), ]
DBHdata$Treatment = factor(DBHdata$Treatment)
DBHdata$Large = factor(DBHdata$Large)
DBHdatarm = DBHdata[DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 1.25 & DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 0.9 & DBHdata$DBH.year.0 < 80, ]
DBHdatarm$InGap = (DBHdatarm$Treatment == "T2: Radial" & DBHdatarm$Large == "Yes")
DBHdatarm$InGap = factor(DBHdatarm$InGap)
mixed2.0 = lmer(log(DBH.year.6)~log(DBH.year.0)+Treatment+InGap+log(DBH.year.0):InGap+(1|Plot), data = DBHdatarm)
X <- data.frame('DBH.year.0'=1:100,
'InGap'=FALSE,
'Plot'=6,
'Treatment'='Control')
PI <- predictInterval(merMod = mixed2.0, newdata = X,
level = 0.95, n.sims = 1000,
stat = "median", type="linear.prediction",
include.resid.var = TRUE)
plot(1:100, exp(PI$fit), type='l',
xlim=c(20,60))
lines(1:100, exp(PI$upr), type='l', col='grey')
lines(1:100, exp(PI$lwr), type='l', col='grey')
X_ingap <- data.frame('DBH.year.0'=1:100,
'InGap'=TRUE,
'Plot'=6,
'Treatment'='T2: Radial')
PI_2 <- predictInterval(merMod = mixed2.0, newdata = X_ingap,
level = 0.95, n.sims = 1000,
stat = "median", type="linear.prediction",
include.resid.var = TRUE)
lines(1:100, exp(PI_2$fit), type='l', col='red')
lines(1:100, exp(PI_2$upr), type='l', lty='dashed', col='red')
lines(1:100, exp(PI_2$lwr), type='l', lty='dashed', col='red')
