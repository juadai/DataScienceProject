(tss-rss)/tss #R^2
plot(glm1.1)
plot(DBHdrop$Tree.growth, fitted(glm1.1), type = "p", col = DBHdrop$Treatment)
abline(0, 1)
glm2.1 = glm(Tree.growth~Treatment+Large+DBH.year.0+Treatment:DBH.year.0+Large:DBH.year.0, family = "Gamma", data = DBHdrop)
summary(glm2.1)
tss = sum((DBHdrop$Tree.growth-mean(DBHdrop$Tree.growth))^2) #TSS
rss = sum((DBHdrop$Tree.growth-fitted(glm2.1))^2) #RSS
tss; rss
(tss-rss)/tss #R^2
plot(glm2.1)
plot(DBHdrop$Tree.growth, fitted(glm2.1), type = "p", col = DBHdrop$Treatment)
abline(0, 1)
DBHdrop[DBHdrop$Tree.growth >= 8, ]
DBHremove = DBHdrop[DBHdrop$Tree.growth < 8, ]
glm1.2 = glm(Tree.growth~Treatment+Large+DBH.year.0+Large:DBH.year.0+Treatment:Large, data = DBHremove)
summary(glm1.2)
tss = sum((DBHremove$Tree.growth-mean(DBHremove$Tree.growth))^2) #TSS
rss = sum((DBHremove$Tree.growth-fitted(glm1.2))^2) #RSS
tss; rss
(tss-rss)/tss #R^2
plot(glm1.2)
plot(DBHremove$Tree.growth, fitted(glm1.2), type = "p", col = DBHremove$Treatment)
abline(0, 1)
glm2.2 = glm(Tree.growth~Treatment+Large+DBH.year.0+Treatment:DBH.year.0+Large:DBH.year.0, family = "Gamma", data = DBHremove)
summary(glm2.2)
tss = sum((DBHremove$Tree.growth-mean(DBHremove$Tree.growth))^2) #TSS
rss = sum((DBHremove$Tree.growth-fitted(glm2.2))^2) #RSS
tss; rss
(tss-rss)/tss #R^2
plot(glm2.2)
plot(DBHremove$Tree.growth, fitted(glm2.2), type = "p", col = DBHremove$Treatment)
abline(0, 1)
library(lme4)
mixed1.0 = lmer(Tree.growth~DBH.year.0+Large+Treatment+DBH.year.0:Large+Treatment:Large+(DBH.year.0+Large+Treatment+DBH.year.0:Large+Treatment:Large|Plot), data = DBHdata)
summary(mixed1.0)
VarCorr(mixed1.0)
y.hat1.0 <- fitted(mixed1.0) # Fitted values
int.hat1.0 <- ranef(mixed1.0)[[1]][[1]] # Predicted intercepts
res.hat1.0 <- residuals(mixed1.0) # Estimated residuals
tss = sum((DBHdata$Tree.growth-mean(DBHdata$Tree.growth))^2) #TSS
rss = sum((DBHdata$Tree.growth-y.hat1.0)^2) #RSS
tss; rss; (tss-rss)/tss #R^2
qqnorm(int.hat1.0, main="Random Intercepts"); qqline(int.hat1.0)
qqnorm(res.hat1.0, main="Residuals"); qqline(res.hat1.0)
plot(y.hat1.0, res.hat1.0, xlab="Fitted Values", ylab="Residuals")
abline(h=0, lty=2)
plot(DBHdata$Tree.growth, y.hat1.0, col = DBHdata$Treatment)
abline(0, 1)
plot(DBHdata$Tree.growth, y.hat1.0, col = DBHdata$Large)
abline(0, 1)
mixed1.1 = lmer(Tree.growth~DBH.year.0+Large+Treatment+DBH.year.0:Large+Treatment:Large+(DBH.year.0+Large+Treatment+DBH.year.0:Large+Treatment:Large|Plot), data = DBHremove)
summary(mixed1.1)
VarCorr(mixed1.1)
y.hat1.1 <- fitted(mixed1.1) # Fitted values
int.hat1.1 <- ranef(mixed1.1)[[1]][[1]] # Predicted intercepts
res.hat1.1 <- residuals(mixed1.1) # Estimated residuals
tss = sum((DBHremove$Tree.growth-mean(DBHremove$Tree.growth))^2) #TSS
rss = sum((DBHremove$Tree.growth-y.hat1.1)^2) #RSS
tss; rss; (tss-rss)/tss #R^2
qqnorm(int.hat1.1, main="Random Intercepts"); qqline(int.hat1.1)
qqnorm(res.hat1.1, main="Residuals"); qqline(res.hat1.1)
plot(y.hat1.1, res.hat1.1, xlab="Fitted Values", ylab="Residuals")
abline(h=0, lty=2)
plot(DBHremove$Tree.growth, y.hat1.1, col = DBHremove$Treatment)
abline(0, 1)
plot(DBHremove$Tree.growth, y.hat1.1, col = DBHremove$Large)
abline(0, 1)
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p") # 8 points outside main group
DBHrm = DBHdata[DBHdata$Tree.growth < 10 & DBHdata$DBH.year.0 < 80, ] # dataframe without the 8 rows
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = DBHdata$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = DBHdata$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
plot(DBHrm$DBH.year.0, DBHrm$DBH.year.6, type = "p", col = DBHrm$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
plot(DBHrm$DBH.year.0, DBHrm$DBH.year.6, type = "p", col = DBHrm$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
cor(DBHdata$DBH.year.0, DBHdata$DBH.year.6) #0.9679595
# best model derived from DBH.year.6~DBH.year.0*Treatment*Large
glm3.0 = glm(DBH.year.6~DBH.year.0+Treatment+Large+DBH.year.0:Large+Treatment:Large, data = DBHdata)
summary(glm3.0)
tss = sum((DBHdata$DBH.year.6-mean(DBHdata$DBH.year.6))^2) #TSS
rss = sum((DBHdata$DBH.year.6-glm3.0$fitted.values)^2) #RSS
(tss-rss)/tss #R^2 = 0.9541006
par(mfrow=c(2,2))
plot(glm3.0)
par(mfrow=c(1,1))
plot(DBHdata$DBH.year.6, glm3.0$fitted.values, type = "p", col = DBHdata$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
abline(0,1)
plot(DBHdata$DBH.year.6, glm3.0$fitted.values, type = "p", col = DBHdata$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
abline(0,1)
# same formula as glm3.0
glm4.0 = glm(DBH.year.6~DBH.year.0+Treatment+Large+DBH.year.0:Large+Treatment:Large, data = DBHrm)
summary(glm4.0)
tss = sum((DBHrm$DBH.year.6-mean(DBHrm$DBH.year.6))^2) #TSS
rss = sum((DBHrm$DBH.year.6-glm4.0$fitted.values)^2) #RSS
(tss-rss)/tss #R^2 = 0.9801139
par(mfrow=c(2,2))
plot(glm4.0)
par(mfrow=c(1,1))
plot(DBHrm$DBH.year.6, glm4.0$fitted.values, type = "p", col = DBHrm$Treatment)
legend("bottomright", legend = c("Control", "T1", "T2"), fill = c("black", "red", "green"))
abline(0,1)
plot(DBHrm$DBH.year.6, glm4.0$fitted.values, type = "p", col = DBHrm$Large)
legend("bottomright", legend = c("not-large", "large"), fill = c("black", "red"))
abline(0,1)
log_model_01 <- glm(log_DBH.year.6 ~ (log_DBH.year.0 + Treatment + Large)^2, family='gaussian', data=DBHdata)
DBHdata$log_DBH.year.0 <- log(DBHdata$DBH.year.0)
DBHdata$log_DBH.year.6<- log(DBHdata$DBH.year.6)
log_model_01 <- glm(log_DBH.year.6 ~ (log_DBH.year.0 + Treatment + Large)^2, family='gaussian', data=DBHdata)
log_model_02 <- step(log_model_01)
summary(log_model_02)
log_model_02 <- step(log_model_01)
summary(log_model_02)
# Step-wise selection (BIC)
k <- log(length(DBHdata$log_DBH.year.6))
log_model_03 <- step(log_model_01, k=k)
summary(log_model_03)
summary(log_model_02)
DBHdata$log_DBH.year.0 <- log(DBHdata$DBH.year.0)
DBHdata$log_DBH.year.6 <- log(DBHdata$DBH.year.6)
log_model_01 <- glm(log_DBH.year.6 ~ (log_DBH.year.0 + Treatment + Large)^2, family='gaussian', data=DBHdata)
# Step-wise selection (AIC)
log_model_02 <- step(log_model_01)
summary(log_model_02)
# Step-wise selection (BIC)
k <- log(length(DBHdata$log_DBH.year.6))
log_model_03 <- step(log_model_01, k=k)
summary(log_model_03)
DBHdata$log_DBH.year.0 <- log(DBHdata$DBH.year.0)
DBHdata$log_DBH.year.6 <- log(DBHdata$DBH.year.6)
log_model_01 <- glm(log_DBH.year.6 ~ (log_DBH.year.0 + Treatment + Large)^2, family='gaussian', data=DBHdata)
# Step-wise selection (AIC)
log_model_02 <- step(log_model_01, trace=F)
summary(log_model_02)
# Step-wise selection (BIC)
k <- log(length(DBHdata$log_DBH.year.6))
log_model_03 <- step(log_model_01, k=k, trace=F)
summary(log_model_03)
anova(log_model_02, log_model_03)
anova(log_model_02, log_model_03, test='Chi)
anova(log_model_02, log_model_03, test='Chi')
anova(log_model_02, log_model_03, test='Chi')
plot(log_model_02)
# Check outliers (98, 141, 198 and maybe 4 more), remove if possible
log_model_02$residuals[log_model_02$residuals>0.15]
plot(log_model_02)
# Check outliers, remove if possible
log_model_02$residuals[log_model_02$residuals>0.15]
plot(log_model_02)
# Check outliers, remove if possible
print('Large residuals:')
log_model_02$residuals[log_model_02$residuals>0.15]
plot(log_model_02)
# Check outliers, remove if possible
print('Large residuals (Absolute value larger than 0.15)')
log_model_02$residuals[log_model_02$residuals>0.15]
df <- read.csv('/Users/nickjolly/Desktop/tfn/DataScienceProject/Tree DBH/dataset/all_plots.csv')
tree_df <- read.csv('/Users/nickjolly/Desktop/tfn/DataScienceProject/Tree DBH/dataset/all_plots.csv')
View(tree_df)
tree_df <- tree_df[,1:9]
View(tree_df)
isna(tree_df$DBH.year.0)
is.na(tree_df$DBH.year.0)
sum(is.na(tree_df$DBH.year.0))
tree_df <- tree_df[!is.na(tree_df$DBH.year.0)]
tree_df <- tree_df[!is.na(tree_df$DBH.year.0),]
tree_df <- tree_df[!is.na(tree_df$DBH.year.6),]
tree_df
str(tree_df)
tree_df$Plot <- factor(tree_df$Plot)
tree_df$Treatment <- factor(tree_df$Treatment)
tree_df$Large <- factor(tree_df$Large)
plot(sort(tree_df$DBH.year.0))
plot(sort(tree_df$DBH.year.0), type='l')
plot(sort(tree_df$DBH.year.6), type='l')
plot(sort(tree_df$DBH.year.6), type='l', add=T)
lines(sort(tree_df$DBH.year.6), type='l')
plot(sort(tree_df$DBH.year.0), type='l')
lines(sort(tree_df$DBH.year.6), type='l')
lines(sort(tree_df$DBH.year.6), type='l', type='red')
lines(sort(tree_df$DBH.year.6), type='l', col='red')
plot(sort(tree_df$DBH.year.0), type='l')
lines(sort(tree_df$DBH.year.6), type='l', col='red')
order(tree_df)
?order
tree_df[order(tree_df$DBH.year.0),]
ordered <- tree_df[order(tree_df$DBH.year.0),]
View(ordered)
ordered <- tree_df[order(tree_df$DBH.year.0),c(6,7)]
View(ordered)
plot(ordered[1])
plot(ordered)
plot(ordered$DBH.year.0, type='l')
lines(ordered$DBH.year.6, col='r')
lines(ordered$DBH.year.6, col='red')
plot(glm(DBH.Year.6 ~ (DBH.Year.0 + Treatment + Large)^2, data=tree_df))
plot(glm(DBH.year.6 ~ (DBH.year.0 + Treatment + Large)^2, data=tree_df))
simple_glm_2 <- step(simple_glm_1)
simple_glm_1 <- glm(DBH.year.6 ~ (DBH.year.0 + Treatment + Large)^2, data=tree_df)
simple_glm_2 <- step(simple_glm_1)
plot(simple_glm_2)
tree_df$log_DBH.year.0 <- log(tree_df$DBH.year.0)
tree_df$log_DBH.year.6 <- log(tree_df$DBH.year.6)
log_glm_1 <- glm(log_DBH.year.6 ~ (log_DBH.year.0 + Treatment + Large)^2, data=tree_df)
log_glm_2 <- step(log_glm_1)
plot(log_glm_2)
log_glm_2$residuals > 0.1
sum(log_glm_2$residuals > 0.1)
sum(abs(log_glm_2$residuals > 0.1))
sum(abs(log_glm_2$residuals) > 0.1)
summary(log_glm_2)
tree_df$Large
is.na(tree_df$Large)
View(tree_df)
DBHdata[DBHdata$Large == "", "Large"] <- "No"
DBHdata[tree_df$Large == "", "Large"] <- "No"
tree_df[tree_df$Large == "", "Large"] <- "No"
simple_glm_1 <- glm(DBH.year.6 ~ (DBH.year.0 + Treatment + Large)^2, data=tree_df)
simple_glm_2 <- step(simple_glm_1)
plot(simple_glm_2)
tree_df$log_DBH.year.0 <- log(tree_df$DBH.year.0)
tree_df$log_DBH.year.6 <- log(tree_df$DBH.year.6)
log_glm_1 <- glm(log_DBH.year.6 ~ (log_DBH.year.0 + Treatment + Large)^2, data=tree_df)
log_glm_2 <- step(log_glm_1)
summary(log_glm_2)
# Outlier detection
sum(abs(log_glm_2$residuals) > 0.15)
logg
lo_glm_2$residuals
log_glm_2$residuals
log_glm_2$residuals[abs(log_glm_2$residuals) > 0.15]
rownames(tree_df) <- 1:length(tree_df[,1])
View(tree_df)
simple_glm_1 <- glm(DBH.year.6 ~ (DBH.year.0 + Treatment + Large)^2, data=tree_df)
simple_glm_2 <- step(simple_glm_1)
plot(simple_glm_2)
summary(log_glm_2)
plot(log_glm_2)
log_glm_2$residuals[abs(log_glm_2$residuals) > 0.15]
names(log_glm_2$residuals[abs(log_glm_2$residuals) > 0.15])
as.numeric(names(log_glm_2$residuals[abs(log_glm_2$residuals) > 0.15]))
outliers <- as.numeric(names(log_glm_2$residuals[abs(log_glm_2$residuals) > 0.15]))
tree_df[-outliers,]
tree_df <- tree_df[-outliers,]
rownames(tree_df) <- 1:length(tree_df[,1])
log_glm_1 <- glm(log_DBH.year.6 ~ (log_DBH.year.0 + Treatment + Large)^2, data=tree_df)
log_glm_2 <- step(log_glm_1)
summary(log_glm_2)
plot(log_glm_2)
log_glm_2$residuals[abs(log_glm_2$residuals) > 0.15]
outliers <- as.numeric(names(log_glm_2$residuals[abs(log_glm_2$residuals) > 0.15]))
tree_df <- tree_df[-outliers,]
rownames(tree_df) <- 1:length(tree_df[,1])
log_glm_1 <- glm(log_DBH.year.6 ~ (log_DBH.year.0 + Treatment + Large)^2, data=tree_df)
log_glm_2 <- step(log_glm_1)
summary(log_glm_2)
plot(log_glm_2)
model3 <- log_DBH.year.6 ~ log_DBH.year.0 + Treatment + Large, data=tree_df)
model3 <- glm(log_DBH.year.6 ~ log_DBH.year.0 + Treatment + Large, data=tree_df)
anova(log_glm_2, model3)
anova(log_glm_2, model3, test='Chi')
anova(model3,log_glm_2, test='Chi')
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
# Load data
abundance_df <- read.csv('../dataset/tables/lf_abund_analysis.csv')
abundance_rel_df <- read.csv('../dataset/tables/lf_abund_rel_analysis.csv')
# Midpoint of range
abundance_matrix <- read.csv('../contingency tables/output/midpoint/abundance_midpoint/lf_abund_quadrats.csv')
n = length(abundance_matrix[,1])
X0 <-rowSums(abundance_matrix[,abundance_matrix[1,] == 0])[3:n]
X3 <-rowSums(abundance_matrix[,abundance_matrix[1,] == 3])[3:n]
X6 <-rowSums(abundance_matrix[,abundance_matrix[1,] == 6])[3:n]
abundance_totals <- abundance_matrix[,1:5]
colnames(abundance_totals) <- abundance_totals[2,]
abundance_totals <- cbind(abundance_totals[3:n,], X0, X3, X6)
abundance_totals <- abundance_totals[abundance_totals$X0>0,]
abundance_totals <- abundance_totals[abundance_totals$X3>0,]
abundance_totals <- abundance_totals[abundance_totals$X6>0,]
plot(abundance_totals$X0, ylab='Total Quadrat Abundance', main='Year 0 (Midpoint)')
lines(c(-50,300), rep(100,2), col='red')
plot(abundance_totals$X3, ylab='Total Quadrat Abundance', main='Year 3 (Midpoint)')
lines(c(-50,300), rep(100,2), col='red')
plot(abundance_totals$X6, ylab='Total Quadrat Abundance', main='Year 6 (Midpoint)')
lines(c(-50,300), rep(100,2), col='red')
tempdir()
# Load data
library(rstudioapi)
library(pROC)
setwd(dirname(getActiveDocumentContext()$path))
diversity_df <- read.csv('../dataset/tables/species_divers_quadrats.csv')
diversity_df_plot <- read.csv('../contingency tables/output/diversity/species_divers_plots.csv')
diversity_df_treat <- read.csv('../contingency tables/output/diversity/species_divers_treatments.csv')
# Treatments, Plot numbers, Quadrat numbers, Life forms as factors
diversity_df$Treatment <- factor(diversity_df$Treatment)
diversity_df$Plot.Number <- factor(diversity_df$Plot.Number)
diversity_df$Quadrat.Number <- factor(diversity_df$Quadrat.Number)
# Convert Fenced, Gap columns to boolean
diversity_df$Gap <- diversity_df$Gap=='True'
diversity_df$Fenced <- diversity_df$Fenced=='True'
diversity_df_plot$Gap <- diversity_df_plot$Gap=='True'
diversity_df_plot$Fenced <- diversity_df_plot$Fenced=='True'
# Remove null rows
diversity_df <- na.omit(diversity_df)
diversity_df_plot <- na.omit(diversity_df_plot)
# Define function to diagnose binomial response
confusion <- function(model, y, data, threshold) {
y_hat <- predict(model, data, type='response') > threshold
conf <- matrix(0, nrow=2, ncol=2)
rownames(conf) <- c('Predict 1', 'Predict 0')
colnames(conf) <- c('Observe 1', 'Observe 0')
conf[1,1] <- sum(y==1 & y_hat==1)
conf[1,2] <- sum(y==0 & y_hat==1)
conf[2,1] <- sum(y==1 & y_hat==0)
conf[2,2] <- sum(y==0 & y_hat==0)
tp_rate <- conf[1,1] / sum(conf[1,]) # Sensitivity
tn_rate <- conf[2,2] / sum(conf[2,]) # Specificity
return(list(Confusion=conf, Sensitivity=tp_rate, Specificity=tn_rate))
}
# Model the probability that diversity increased between years 0 and 3
diversity_df$Y0.Y3.Increase <- diversity_df$X3 > diversity_df$X0
diversity_df$Y0.Y3.Increase <- as.numeric(diversity_df$Y0.Y3.Increase)
# Model 1: Treatment, Fenced, Gap, first-order interaction terms
diversity_Y0_Y3_01 <- glm(Y0.Y3.Increase ~ (Treatment + Fenced + Gap)^2,
family='binomial', data=diversity_df)
summary(diversity_Y0_Y3_01)
# Model 2: Step-wise selection fom Model 1 (AIC)
diversity_Y0_Y3_02 <- step(diversity_Y0_Y3_01)
summary(diversity_Y0_Y3_02)
anova(diversity_Y0_Y3_01, diversity_Y0_Y3_02, test='Chi')
# Model 3: Check a model without interaction terms
diversity_Y0_Y3_03 <- glm(Y0.Y3.Increase ~ Treatment + Fenced + Gap,
family='binomial', data=diversity_df)
summary(diversity_Y0_Y3_03)
# Model 4: Try step-wise selection (BIC)
k = log(length(diversity_df[,1]))
diversity_Y0_Y3_04 <- step(diversity_Y0_Y3_01, k=k)
summary(diversity_Y0_Y3_04)
anova(diversity_Y0_Y3_04, diversity_Y0_Y3_02, test='Chi')
# There is not sufficient evidence to suggest that Fenced or Gap are significant
summary(diversity_Y0_Y3_02)
# Estimated odds that diversity increased in a Gap Treatment quadrat (vs Control)
exp(0.04498) # 1 ... Not significant
# Estimated odds that diversity increased in a Radial Treatment quadrat (vs Control)
exp(-0.87843) # 0.42
# Estimated 95% CI for these odds
c(exp(-0.87843-1.96*0.31185), exp(-0.87843+1.96*0.31185))
r <- roc(diversity_df$Y0.Y3.Increase, predict(diversity_Y0_Y3_02, diversity_df, type='response'))
r$auc #0.60
plot.roc(r)
c <- confusion(diversity_Y0_Y3_02, diversity_df$Y0.Y3.Increase, diversity_df, 0.5)
c$Confusion # Matrix
c$Sensitivity # True Positive Rate
c$Specificity # True Negative Rate
# Model the probability that diversity increased between years 3 and 6
diversity_df$Y3.Y6.Increase <- diversity_df$X6 > diversity_df$X3
diversity_df$Y3.Y6.Increase <- as.numeric(diversity_df$Y3.Y6.Increase)
# Model 1: Treatment, Fenced, Gap, with first-order interaction terms
diversity_Y3_Y6_01 <- glm(Y3.Y6.Increase ~ (Treatment + Fenced + Gap)^2,
family='binomial', data=diversity_df)
summary(diversity_Y3_Y6_01)
# Model 2: Step-wise selection from Model 1 (AIC)
diversity_Y3_Y6_02 <- step(diversity_Y3_Y6_01)
summary(diversity_Y3_Y6_02)
anova(diversity_Y3_Y6_02, diversity_Y3_Y6_01, test='Chi')
# Model 3: Step-wise selection from Model 1 (BIC)
k = log(length(diversity_df[,1]))
diversity_df
str(diversity_df)
diversity_df$X0 * 100
round(diversity_df$X0 * 100)
diversity_Y0_Y3_11 <- glm(X3 ~ (X0 + Treatment + Gap + Fenced)^2,
data=diversity_df)
summary(diversity_Y0_Y3_11)
diversity_Y0_Y3_12 <- step(diversity_Y0_Y3_11)
summary(diversity_Y0_Y3_12)
anova(diversity_Y0_Y3_12, diversity_Y0_Y3_11, test='Chi')
plot(diversity_Y0_Y3_12)
k = log(length(diversity_df[,1]))
diversity_Y0_Y3_13 <- step(diversity_Y0_Y3_11, k=k)
summary(diversity_Y0_Y3_13)
summary(diversity_Y0_Y3_12)
anova(diversity_Y0_Y3_13, diversity_Y0_Y3_12, test='Chi')
# Can't take the smaller model
plot(diversity_Y0_Y3_13)
summary(diversity_Y0_Y3_12)
diversity_Y0_Y3_11 <- glm(X3 ~ (X0 + Treatment + Gap + Fenced)^3,
data=diversity_df)
anova(diversity_Y0_Y3_12, diversity_Y0_Y3_11, test='Chi')
diversity_Y0_Y3_11 <- glm(X3 ~ (X0 + Treatment + Gap + Fenced)^2,
data=diversity_df)
summary(diversity_Y0_Y3_11)
diversity_Y0_Y3_12 <- step(diversity_Y0_Y3_11)
summary(diversity_Y0_Y3_12)
anova(diversity_Y0_Y3_12, diversity_Y0_Y3_11, test='Chi')
plot(diversity_Y0_Y3_12)
# Can't take the smaller model - treatment and its associated interactions are signif
plot(diversity_Y0_Y3_13)
diversity_Y3_Y6_11 <- glm(X6 ~ (X0 + X3 + Treatment + Gap + Fenced)^2,
data=diversity_df)
summary(diversity_Y3_Y6_11)
diversity_Y3_Y6_12 <- step(diversity_Y3_Y6_11)
summary(diversity_Y3_Y6_12)
plot(diversity_Y0_Y3_12)
k = log(length(diversity_df[,1]))
diversity_Y0_Y3_13 <- step(diversity_Y0_Y3_11, k=k)
summary(diversity_Y0_Y3_13)
diversity_Y3_Y6_11 <- glm(X6 ~ (X0 + X3 + Treatment + Gap + Fenced)^2,
data=diversity_df)
summary(diversity_Y3_Y6_11)
diversity_Y3_Y6_12 <- step(diversity_Y3_Y6_11)
summary(diversity_Y3_Y6_12)
anova(diversity_Y0_Y3_12, diversity_Y0_Y3_11, test='Chi')
plot(diversity_Y0_Y3_12)
k = log(length(diversity_df[,1]))
str(diversity_df)
diversity_Y3_01 <- glm(X3 ~ (X0 + Treatment + Gap + Fenced)^2,
data=diversity_df)
summary(diversity_Y3_01)
diversity_Y3_02 <- step(diversity_Y3_01)
summary(diversity_Y3_02)
anova(diversity_Y3_02, diversity_Y3_01, test='Chi')
plot(diversity_Y3_02)
anova(diversity_Y3_03, diversity_Y3_02, test='Chi')
str(diversity_df)
diversity_Y3_01 <- glm(X3 ~ (X0 + Treatment + Gap + Fenced)^2,
data=diversity_df)
summary(diversity_Y3_01)
diversity_Y3_02 <- step(diversity_Y3_01)
summary(diversity_Y3_02)
anova(diversity_Y3_02, diversity_Y3_01, test='Chi')
plot(diversity_Y3_02)
k = log(length(diversity_df[,1]))
diversity_Y3_03 <- step(diversity_Y3_01, k=k)
summary(diversity_Y3_03)
anova(diversity_Y3_03, diversity_Y3_02, test='Chi')
diversity_Y6_01 <- glm(X6 ~ (X0 + X3 + Treatment + Gap + Fenced)^2,
data=diversity_df)
summary(diversity_Y6_01)
diversity_Y6_02 <- step(diversity_Y6_01)
summary(diversity_Y6_02)
anova(diversity_Y6_02, diversity_Y6_01, test='Chi')
plot(diversity_Y0_Y3_12)
plot(diversity_Y6_02)
k = log(length(diversity_df[,1]))
diversity_Y6_03 <- step(diversity_Y6_01, k=k)
summary(diversity_Y6_03)
anova(diversity_Y6_03, diversity_Y6_02, test='Chi')
# Can't take the smaller model
plot(diversity_Y6_02)
# Load data
library(rstudioapi)
library(pROC)
setwd(dirname(getActiveDocumentContext()$path))
richness_df <- read.csv('../dataset/tables/species_richness_quadrats.csv')
richness_df_plot <- read.csv('../contingency tables/output/richness/species_richness_plots.csv')
# Treatments, Plot numbers, Quadrat numbers, Life forms as factors
richness_df$Treatment <- factor(richness_df$Treatment)
richness_df$Plot.Number <- factor(richness_df$Plot.Number)
richness_df$Quadrat.Number <- factor(richness_df$Quadrat.Number)
# Convert Fenced, Gap columns to boolean
richness_df$Gap <- richness_df$Gap=='True'
richness_df$Fenced <- richness_df$Fenced=='True'
richness_df_plot$Gap <- richness_df_plot$Gap=='True'
richness_df_plot$Fenced <- richness_df_plot$Fenced=='True'
# Remove null rows
richness_df <- na.omit(richness_df)
richness_df_plot <- na.omit(richness_df_plot)
# Define function to diagnose binomial response
confusion <- function(model, y, data, threshold) {
y_hat <- predict(model, data, type='response') > threshold
conf <- matrix(0, nrow=2, ncol=2)
rownames(conf) <- c('Predict 1', 'Predict 0')
colnames(conf) <- c('Observe 1', 'Observe 0')
conf[1,1] <- sum(y==1 & y_hat==1)
conf[1,2] <- sum(y==0 & y_hat==1)
conf[2,1] <- sum(y==1 & y_hat==0)
conf[2,2] <- sum(y==0 & y_hat==0)
tp_rate <- conf[1,1] / sum(conf[1,]) # Sensitivity
tn_rate <- conf[2,2] / sum(conf[2,]) # Specificity
return(list(Confusion=conf, Sensitivity=tp_rate, Specificity=tn_rate))
}
str(richness_df)
richness_Y3_01 <- glm(X3 ~ (X0 + Treatment + Gap + Fenced)^2,
family='poisson', data=richness_df)
summary(richness_Y3_01)
richness_Y3_02 <- step(richness_Y3_01)
summary(richness_Y3_02)
plot(richness_Y3_02)
k = log(length(richness_df[,1]))
richness_Y3_03 <- step(richness_Y3_01, k=k)
summary(richness_Y3_03)
anova(richness_Y3_03, richness_Y3_02, test='Chi')
summary(richness_Y3_02)
richness_Y3_02$call
richness_Y3_03$call
anova(richness_Y3_03, richness_Y3_02, test='Chi')
summary(richness_Y3_02)
richness_Y6_01 <- glm(X6 ~ (X0 + X3 + Treatment + Gap + Fenced)^2,
family='poisson', data=richness_df)
summary(richness_Y6_01)
richness_Y6_02 <- step(richness_Y6_01)
summary(richness_Y6_02)
anova(richness_Y6_02, richness_Y6_01, test='Chi')
k = log(length(richness_df[,1]))
richness_Y6_03 <- step(richness_Y6_01, k=k)
summary(richness_Y6_03)
anova(richness_Y6_02, richness_Y6_03, test='Chi')
