degree=1,
cost=10,
data=tdata)
svmfit <- svm(y~.,
kernel='polynomial',
degree=1,
cost=10,
scale=F,
data=tdata)
plot(svmfit, tdata)
summary(svmfit)
cv <- tune(svm, y~., data=tdata,
kernel='polynomial',
degree=1,
scale=F,
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(cv)
bestmod <-cv$best.model
plot(bestmod, tdata)
set.seed(100)
Xtest <- matrix(rnorm(N*2), ncol=2)
for (i in 101:200) {
Xtest[i,] <- Xtest[i,] + z[2,]
}
for (i in 201:300) {
Xtest[i,] <- Xtest[i,] + z[3,]
}
ytest <- sample(c(1,2,3), N, replace=T)
testdata <- data.frame(X=Xtest, y=factor(ytest))
sum(predict(bestmod, testdata) != testdata$y)
ggplot(testdata, aes(X[,1], X[,2], color=y)) +
geom_point()  +
labs(x = 'X1', y='X2',
title = 'Testing Dataset') +
guides(color = guide_legend(title = "Class"))
plot(bestmod, testdata)
sum(predict(bestmod, testdata) ==1 & testdata$y==1)
sum(predict(bestmod, testdata) ==2 & testdata$y==2)
sum(predict(bestmod, testdata) ==3 & testdata$y==3)
sum(predict(bestmod, testdata) ==3 & testdata$y==3)
ggplot(testdata, aes(X[,1], X[,2], color=y)) +
geom_point()  +
labs(x = 'X1', y='X2',
title = 'Testing Dataset') +
guides(color = guide_legend(title = "Class"))
sum(predict(bestmod, testdata) ==1 & testdata$y==1)
?svm
svmfit <- svm(y~.,
kernel='linear',
cost=10,
scale=F,
data=tdata)
plot(svmfit, tdata)
summary(svmfit)
cv <- tune(svm, y~., data=tdata,
kernel='linear',
scale=F,
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(cv)
bestmod <-cv$best.model
plot(bestmod, tdata)
summary(bestmod)
# Question 1
library(e1071)
library(ggplot2)
C <- 3
N <- 300
set.seed(50)
X <- matrix(rnorm(N*2), ncol=2)
z <- matrix(c(0, 0, 3, 0, 3, 0), C, 2)
y <- c(rep(1,100), rep(2,100), rep(3,100))
for (i in 101:200) {
X[i,] <- X[i,] + z[2,]
}
for (i in 201:300) {
X[i,] <- X[i,] + z[3,]
}
plot(X[,1], X[,2], col=y)
tdata <- data.frame(X=X,
y=factor(y))
ggplot(tdata, aes(X[,1], X[,2], color=y)) +
geom_point()  +
labs(x = 'X1', y='X2',
title = 'Training Dataset') +
guides(color = guide_legend(title = "Class"))
svmfit <- svm(y~.,
kernel='linear',
cost=10,
scale=F,
data=tdata)
plot(svmfit, tdata)
summary(svmfit)
# 2.3
cv <- tune(svm, y~., data=tdata,
kernel='linear',
scale=F,
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(cv)
bestmod <-cv$best.model
summary(bestmod)
summary(svmfit)
summary(bestmod)
summary(cv)
plot(bestmod, tdata)
# 2.3
set.seed(50)
cv <- tune(svm, y~., data=tdata,
kernel='linear',
scale=F,
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(cv)
bestmod <-cv$best.model
summary(bestmod)
plot(bestmod, tdata)
cv <- tune(svm, y~., data=tdata,
kernel='linear',
scale=F,
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(cv)
bestmod <-cv$best.model
summary(bestmod)
plot(bestmod, tdata)
cv <- tune(svm, y~., data=tdata,
kernel='linear',
scale=F,
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(cv)
bestmod <-cv$best.model
summary(bestmod)
# 2.3
set.seed(50)
cv <- tune(svm, y~., data=tdata,
kernel='linear',
scale=F,
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(cv)
bestmod <-cv$best.model
summary(bestmod)
cv <- tune(svm, y~., data=tdata,
kernel='linear',
scale=F,
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(cv)
bestmod <-cv$best.model
summary(bestmod)
cv <- tune(svm, y~., data=tdata,
kernel='linear',
scale=F,
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(cv)
bestmod <-cv$best.model
summary(bestmod)
set.seed(50)
function (seed, kind = NULL, normal.kind = NULL, sample.kind = NULL)
set.seed(50)
set.seed(50)
X <- matrix(rnorm(N*2), ncol=2)
z <- matrix(c(0, 0, 3, 0, 3, 0), C, 2)
y <- c(rep(1,100), rep(2,100), rep(3,100))
for (i in 101:200) {
X[i,] <- X[i,] + z[2,]
}
for (i in 201:300) {
X[i,] <- X[i,] + z[3,]
}
tdata <- data.frame(X=X,
y=factor(y))
ggplot(tdata, aes(X[,1], X[,2], color=y)) +
geom_point()  +
labs(x = 'X1', y='X2',
title = 'Training Dataset') +
guides(color = guide_legend(title = "Class"))
svmfit <- svm(y~.,
kernel='linear',
cost=10,
scale=F,
data=tdata)
plot(svmfit, tdata)
summary(svmfit)
# 2.3
cv <- tune(svm, y~., data=tdata,
kernel='linear',
scale=F,
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(cv)
bestmod <-cv$best.model
summary(bestmod)
summary(svmfit)
# 2.3
cv <- tune(svm, y~., data=tdata,
kernel='linear',
scale=F,
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(cv)
bestmod <-cv$best.model
# 2.3
cv <- tune(svm, y~., data=tdata,
kernel='linear',
scale=F,
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(cv)
# 2.3
cv <- tune(svm, y~., data=tdata,
kernel='linear',
scale=F,
ranges=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(cv)
summary(bestmod)
bestmod <-cv$best.model
summary(bestmod)
plot(bestmod, tdata)
set.seed(100)
Xtest <- matrix(rnorm(N*2), ncol=2)
for (i in 101:200) {
Xtest[i,] <- Xtest[i,] + z[2,]
}
for (i in 201:300) {
Xtest[i,] <- Xtest[i,] + z[3,]
}
ytest <- sample(c(1,2,3), N, replace=T)
testdata <- data.frame(X=Xtest, y=factor(ytest))
sum(predict(bestmod, testdata) ==1 & testdata$y==1)
ggplot(testdata, aes(X[,1], X[,2], color=y)) +
geom_point()  +
labs(x = 'X1', y='X2',
title = 'Testing Dataset') +
guides(color = guide_legend(title = "Class"))
plot(bestmod, testdata)
results <- predict(bestmod, testdata)
table(results)
table(results, testdata$y)
table(results ~ testdata$y)
table(results,testdata$y)
library(rstudioapi)
library(lme4)
library(lmerTest)
setwd(dirname(getActiveDocumentContext()$path))
df <- read.csv('../dataset/tables/abundance_species_for_analysis.csv')
unique(df['Life.Form'])
colnames(df)
df$Plot.Number <- factor(df$Plot.Number)
df$Treatment <- factor(df$Treatment)
df$Fenced <- df$Fenced=="True"
df$Gap <- df$Gap=="True"
# Remove rows with all abundance = 0
df <- df[!(df$X0 == 0 & df$X3 == 0 & df$X6 == 0),]
df_Y0 <- df[,c(1:7,8)]
df_Y0 <- cbind(df_Y0, 0)
colnames(df_Y0)[8:9] <- c("X", 'Year')
df_Y3 <- df[,c(1:7,9)]
df_Y3 <- cbind(df_Y3, 3)
colnames(df_Y3)[8:9] <- c("X", 'Year')
df_Y6 <- df[,c(1:7,10)]
df_Y6 <- cbind(df_Y6, 6)
colnames(df_Y6)[8:9] <- c("X", 'Year')
df_prime <- rbind(df_Y0,df_Y3,df_Y6)
df_prime$Year2 <- df_prime$Year^2
df_prime$log_X <- df_prime$X
df_prime[df_prime$X==0, 'log_X'] <- 0.1
df_prime$log_X <- log(df_prime$log_X)
# LF = Large Forb/herb
df_LF <- df_prime[df_prime$Life.Form=="Large Forb/Herb",]
LF_m1 <- lmer(X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_LF)
LF_m2 <- get_model(step(LF_m1))
summary(LF_m2)
plot(LF_m2)
# Exclude rows where abundance = 0
df_LF <- df_LF[df_LF$log_X >= 0,]
LF_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_LF)
LF_m4 <- get_model(step(LF_m3))
summary(LF_m4)
plot(LF_m4)
RSS <- sum((df_LF$log_X - fitted(LF_m4, df_LF))^2)
TSS <- sum((df_LF$log_X - mean(df_LF$log_X))^2)
R2 <- 1-RSS/TSS
R2
summary(LF_m4)
LF_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1 + Treatment + Gap + Fenced|Species.Name), data=df_LF)
LF_m4 <- get_model(step(LF_m3))
summary(LF_m4)
LF_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_LF)
LF_m4 <- get_model(step(LF_m3))
summary(LF_m4)
LF_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1 + Treatment + Gap + Fenced|Species.Name), data=df_LF)
LF_m4 <- get_model(step(LF_m3))
RSS <- sum((df_LF$log_X - fitted(LF_m4, df_LF))^2)
TSS <- sum((df_LF$log_X - mean(df_LF$log_X))^2)
R2 <- 1-RSS/TSS
R2
LF_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_LF)
LF_m4 <- get_model(step(LF_m3))
summary(LF_m4)
plot(LF_m4)
RSS <- sum((df_LF$log_X - fitted(LF_m4, df_LF))^2)
TSS <- sum((df_LF$log_X - mean(df_LF$log_X))^2)
R2 <- 1-RSS/TSS
R2
plot(LF_m2)
LF_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_LF)
LF_m4 <- get_model(step(LF_m3))
summary(LF_m4)
plot(LF_m4)
# MTG = Medium Tufted Grass
df_MTG <- df_prime[df_prime$Life.Form=="Medium Tufted grass/sedge",]
MTG_m1 <- lmer(X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_MTG)
MTG_m2 <- get_model(step(MTG_m1))
summary(MTG_m2)
plot(MTG_m2)
# Exclude rows where abundance = 0
df_MTG <- df_MTG[df_MTG$log_X >= 0,]
MTG_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_MTG)
MTG_m4 <- get_model(step(MTG_m3))
summary(MTG_m4)
plot(MTG_m4)
RSS <- sum((df_MTG$log_X - fitted(MTG_m4, df_MTG))^2)
TSS <- sum((df_MTG$log_X - mean(df_MTG$log_X))^2)
R2 <- 1-RSS/TSS
R2
# MNTG = Medium Non-Tufted Grass
df_MNTG <- df_prime[df_prime$Life.Form=="Medium Non-tufted grass/sedge",]
MNTG_m1 <- lmer(X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_MNTG)
MNTG_m2 <- get_model(step(MNTG_m1))
summary(MNTG_m2)
plot(MNTG_m2)
# Exclude rows where abundance = 0
df_MNTG <- df_MNTG[df_MNTG$log_X >= 0,]
MNTG_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_MNTG)
MNTG_m4 <- get_model(step(MNTG_m3))
summary(MNTG_m4)
plot(MNTG_m4)
RSS <- sum((df_MNTG$log_X - fitted(MNTG_m4, df_MNTG))^2)
TSS <- sum((df_MNTG$log_X - mean(df_MNTG$log_X))^2)
R2 <- 1-RSS/TSS
R2
View(df_LF)
View(df)
df[df$Life.Form=='Large Forb/Herb',]
df_LF_new <- df[df$Life.Form=='Large Forb/Herb',]
m1 <- glmer(X6~ (X0+Treatment+Gap+Fenceed)^2 + (1|Plot) + (1|Species),
family='Poisson'mdata=df_LF_new)
m1 <- glmer(X6~ (X0+Treatment+Gap+Fenceed)^2 + (1|Plot) + (1|Species),
family='Poisson', data=df_LF_new)
m1 <- glmer(X6~ (X0+Treatment+Gap+Fenceed)^2 + (1|Plot) + (1|Species),
family='poisson', data=df_LF_new)
m1 <- glmer(X6~ (X0+Treatment+Gap+Fenced)^2 + (1|Plot) + (1|Species),
family='poisson', data=df_LF_new)
m1 <- glmer(X6~ (X0+Treatment+Gap+Fenced)^2 + (1|Plot.Number) + (1|Species.Name),
family='poisson', data=df_LF_new)
m2 <- get_model(step(m1))
library(lmerTools)
library(merTools)
m2 <- get_model(step(m1))
m1 <- glmer(X6~ (X0+Treatment+Gap+Fenced)^2 + (1|Plot.Number) + (1|Species.Name),
family='poisson', data=df_LF_new)
m2 <- get_model(step(m1))
summary(m1)
plot(m1)
m1 <- glmer(X3~ (X0+Treatment+Gap+Fenced)^2 + (1|Plot.Number) + (1|Species.Name),
family='poisson', data=df_LF_new)
m2 <- get_model(step(m1))
summary(m1)
ject")
ject")
# load data
data = read.csv("/Users/nickjolly/Desktop/tfn/DataScienceProject/Tree DBH/dataset/all_plots.csv", stringsAsFactors = FALSE)
DBHdata = data[1:9]
# blank "Large", assume "No" where it's blank
DBHdata[DBHdata$Large == "", "Tree.Number"]
DBHdata[DBHdata$Large == "", "Large"] = "No"
# remove rows with NA in "DBH.year.6"
DBHdata[is.na(DBHdata$DBH.year.6), 1:7] # 9 NAs for "DBH.year.6"
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.6), ]
# load data
data = read.csv("/Users/nickjolly/Desktop/tfn/DataScienceProject/Tree DBH/dataset/all_plots.csv", stringsAsFactors = FALSE)
DBHdata = data[1:9]
# blank "Large", assume "No" where it's blank
DBHdata[DBHdata$Large == "", "Tree.Number"]
DBHdata[DBHdata$Large == "", "Large"] = "No"
# remove rows with NA in "DBH.year.6"
DBHdata[is.na(DBHdata$DBH.year.6), 1:7] # 9 NAs for "DBH.year.6"
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.6), ]
# remove rows with NA in "DBH.year.0"
DBHdata[is.na(DBHdata$DBH.year.0), 1:7] # 2 NAs for "DBH.year.0"
DBHdata = DBHdata[!is.na(DBHdata$DBH.year.0), ]
# NA in "Class.year.0" and NA in "Class.year.6", no modification
DBHdata[is.na(DBHdata$Class.year.0) | is.na(DBHdata$Class.year.6), ]
# both in Plot5(T2: Radial), Tree.Number 148, 149, they have extremely large DBH.
DBHdata$Treatment = factor(DBHdata$Treatment)
DBHdata$Large = factor(DBHdata$Large)
DBHdata[DBHdata$DBH.year.6 <= DBHdata$DBH.year.0, ]
# points outside the main group
par(mfrow=c(1,2))
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6, type = "p", col = factor(DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80))
plot(DBHdata$DBH.year.0, DBHdata$DBH.year.6/DBHdata$DBH.year.0, type = "p", col = factor(DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80), ylab = "gradient")
DBHdata[DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 1.25 | DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 0.9 | DBHdata$DBH.year.0 > 80, ]
# remove these outliers
DBHdatarm = DBHdata[DBHdata$DBH.year.6/DBHdata$DBH.year.0 < 1.25 & DBHdata$DBH.year.6/DBHdata$DBH.year.0 > 0.9 & DBHdata$DBH.year.0 < 80, ]
cor(DBHdata$DBH.year.0, DBHdata$DBH.year.6)
cor(log(DBHdata$DBH.year.0), log(DBHdata$DBH.year.6))
cor(DBHdatarm$DBH.year.0, DBHdatarm$DBH.year.6)
cor(log(DBHdatarm$DBH.year.0), log(DBHdatarm$DBH.year.6))
par(mfrow=c(3,4))
for (i in 1:12) {
plot(DBHdata[DBHdata$Plot == i, "DBH.year.0"], DBHdata[DBHdata$Plot == i, "DBH.year.6"], xlab = paste("Plot", i, "DBH.year.0"), ylab = paste("Plot", i, "DBH.year.6"), xlim = c(20,70), ylim = c(20,70), col = DBHdata[DBHdata$Plot == i, "Treatment"])
abline(0,1)
}
for (i in 1:12) {
plot(log(DBHdata[DBHdata$Plot == i, "DBH.year.0"]), log(DBHdata[DBHdata$Plot == i, "DBH.year.6"]), xlab = paste("Plot", i, "log(DBH.year.0)"), ylab = paste("Plot", i, "log(DBH.year.6)"), xlim = c(3.0,4.3), ylim = c(3.0, 4.3), col = DBHdata[DBHdata$Plot == i, "Treatment"])
abline(0,1)
}
DBHdatarm$InGap = (DBHdatarm$Treatment == "T2: Radial" & DBHdatarm$Large == "Yes")
DBHdatarm$InGap = factor(DBHdatarm$InGap)
library(lme4)
mixed2.0 = lmer(log(DBH.year.6)~log(DBH.year.0)+Treatment+InGap+log(DBH.year.0):InGap+(1|Plot), data = DBHdatarm)
summary(mixed2.0)
VarCorr(mixed2.0)
y.hat <- fitted(mixed2.0) # Fitted values
int.hat <- ranef(mixed2.0)[[1]][[1]] # Predicted intercepts
res.hat <- residuals(mixed2.0) # Estimated residuals
tss = sum((log(DBHdatarm$DBH.year.6)-mean(log(DBHdatarm$DBH.year.6)))^2) #TSS
rss = sum((log(DBHdatarm$DBH.year.6)-y.hat)^2) #RSS
(tss-rss)/tss #R^2 = 0.9801595
qqnorm(int.hat, main="Random Intercepts"); qqline(int.hat)
qqnorm(res.hat, main="Residuals"); qqline(res.hat)
plot(y.hat, res.hat, xlab="Fitted Values", ylab="Residuals")
abline(h=0, lty=2)
plot(log(DBHdatarm$DBH.year.6), y.hat, col = DBHdatarm$Treatment)
abline(0, 1)
plot(log(DBHdatarm$DBH.year.6), y.hat, col = DBHdatarm$Large)
abline(0, 1)
plot(log(DBHdatarm$DBH.year.6), y.hat, col = DBHdatarm$InGap)
abline(0, 1)
# add tree growth attribute
DBHdata$Tree.growth = DBHdata$DBH.year.6-DBHdata$DBH.year.0
plot(DBHdata$DBH.year.0, DBHdata$Tree.growth, col = DBHdata$Large, ylim = c(-10,20))
legend("topright", legend = c("large", "not large"), fill = c("red", "black"), cex = 0.8)
plot(DBHdata[DBHdata$Treatment == "Control", "DBH.year.0"], DBHdata[DBHdata$Treatment == "Control", "Tree.growth"], col = DBHdata[DBHdata$Treatment == "Control", "Large"], xlab = "Control DBH.year.0", ylab = "Control tree growth", ylim = c(-10,20))
legend("topright", legend = c("large", "not large"), fill = c("red", "black"), cex = 0.8)
plot(DBHdata[DBHdata$Treatment == "T1: Gap", "DBH.year.0"], DBHdata[DBHdata$Treatment == "T1: Gap", "Tree.growth"], col = DBHdata[DBHdata$Treatment == "T1: Gap", "Large"], xlab = "T1 DBH.year.0", ylab = "T1 tree growth", ylim = c(-10,20))
legend("topright", legend = c("large", "not large"), fill = c("red", "black"), cex = 0.8)
plot(DBHdata[DBHdata$Treatment == "T2: Radial", "DBH.year.0"], DBHdata[DBHdata$Treatment == "T2: Radial", "Tree.growth"], col = DBHdata[DBHdata$Treatment == "T2: Radial", "Large"], xlab = "T2 DBH.year.0", ylab = "T2 tree growth", ylim = c(-10,20))
legend("topright", legend = c("large", "not large"), fill = c("red", "black"), cex = 0.8)
# plot constrain according to mixed2.0
plot(DBHdatarm$DBH.year.0, DBHdatarm$DBH.year.6, col = DBHdatarm$InGap, xlim = c(20,80))
abline(v = 52.76, col = "blue") # constrain for T2InGap > T2 not InGap
abline(v = 57.87, col = "green") # constrain for T2InGap > T1
abline(v = 74.42, col = "orange") # constrain for T2InGap > Control
legend("topleft", c("InGap points", "not InGap points", "InGap>T2notInGap constrain", "InGap>T1 constrain", "InGap>Control constrain"), fill = c("black", "red", "blue", "green", "orange"), cex = 0.9)
plot(DBHdatarm[DBHdatarm$Treatment == "Control", "DBH.year.0"], DBHdatarm[DBHdatarm$Treatment == "Control", "DBH.year.6"], xlim = c(20,70), ylim = c(20,70), xlab = "DBHdatarm$DBH.year.0", ylab = "DBHdatarm$DBH.year.6")
points(DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.0"], DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.6"], col = "red")
legend("bottomright", legend = c("Control", "InGap"), fill = c("black", "red"))
plot(DBHdatarm[DBHdatarm$Treatment == "T1: Gap", "DBH.year.0"], DBHdatarm[DBHdatarm$Treatment == "T1: Gap", "DBH.year.6"], xlim = c(20,70), ylim = c(20,70), xlab = "DBHdatarm$DBH.year.0", ylab = "DBHdatarm$DBH.year.6")
points(DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.0"], DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.6"], col = "red")
legend("bottomright", legend = c("T1: Gap", "InGap"), fill = c("black", "red"))
plot(DBHdatarm[DBHdatarm$Treatment == "T2: Radial", "DBH.year.0"], DBHdatarm[DBHdatarm$Treatment == "T2: Radial", "DBH.year.6"], xlim = c(20,70), ylim = c(20,70), xlab = "DBHdatarm$DBH.year.0", ylab = "DBHdatarm$DBH.year.6")
points(DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.0"], DBHdatarm[DBHdatarm$InGap == TRUE, "DBH.year.6"], col = "red")
legend("bottomright", legend = c("T2: Radial", "InGap"), fill = c("black", "red"))
plot(DBHdatarm[DBHdatarm$Treatment != "T2: Radial", "DBH.year.0"], DBHdatarm[DBHdatarm$Treatment != "T2: Radial", "DBH.year.6"], col = DBHdatarm[DBHdatarm$Treatment != "T2: Radial", "Treatment"])
plot(DBHdatarm[DBHdatarm$Treatment != "T1: Gap", "DBH.year.0"], DBHdatarm[DBHdatarm$Treatment != "T1: Gap", "DBH.year.6"], col = DBHdatarm[DBHdatarm$Treatment != "T1: Gap", "Treatment"])
#library(merTools)
X_ingap <- data.frame('DBH.year.0'=1:100, 'InGap'=TRUE, 'Plot'=6, 'Treatment'='T2: Radial')
PI_2 <- predictInterval(merMod = mixed2.0, newdata = X_ingap, level = 0.95, n.sims = 1000, stat = "median", type="linear.prediction", include.resid.var = TRUE)
for (t in c("Control", "T1: Gap", "T2: Radial")) {
X <- data.frame('DBH.year.0'=1:100, 'InGap'=FALSE, 'Plot'=6, 'Treatment'=t)
PI <- predictInterval(merMod = mixed2.0, newdata = X, level = 0.95, n.sims = 1000, stat = "median", type="linear.prediction", include.resid.var = TRUE)
plot(1:100, exp(PI$fit), type='n', xlim=c(20,60), ylim = c(10,80), xlab = "DBH.year.0", ylab = "predicted DBH.year.6")
polygon(c(1:100, 100:1), c(exp(PI$upr), rev(exp(PI$lwr))), col = "light grey", border = "light grey")
lines(1:100, exp(PI$fit), type = "l")
polygon(c(1:100, 100:1), c(exp(PI_2$upr), rev(exp(PI_2$lwr))), col = rgb(255,0,0, 50, maxColorValue = 255), border = rgb(255,0,0, 50, maxColorValue = 255))
lines(1:100, exp(PI_2$fit), type = "l", col = "red")
legend("topleft", legend = c("InGap", t), fill = c("red", "black"))
}
m1 <- glmer(X3~ (X0+Treatment+Gap+Fenced)^2 + (1|Plot.Number) + (1|Species.Name),
family='poisson', data=df_LF_new)
summary(m1)
summary(m1)
plot(m1)
df_LF_new <- df[df$Life.Form=='Large Forb/Herb' & df$X3>0 & df$X6,]
m1 <- glmer(X3~ (X0+Treatment+Gap+Fenced)^2 + (1|Plot.Number) + (1|Species.Name),
family='poisson', data=df_LF_new)
summary(m1)
plot(m1)
m2 <- glmer(X6 ~ (X0 + X3 +Treatment+Gap+Fenced)^2 + (1|Plot.Number) + (1|Species.Name),
family='poisson', data=df_LF_new)
summary(m2)
plot(m2)
m1 <- lmer(X3~ (X0+Treatment+Gap+Fenced)^2 + (1|Plot.Number) + (1|Species.Name), data=df_LF_new)
summary(m1)
m2 <- get_model(step(m1))
summaryM2
summary(m2)
plot(m2)
m3 <- lmer(log(X3)~ (log(X0)+Treatment+Gap+Fenced)^2 + (1|Plot.Number) + (1|Species.Name), data=df_LF_new)
df_LF_new <- df[df$Life.Form=='Large Forb/Herb' & df$X3>0 & df$X0>0,]
m1 <- lmer(X3~ (X0+Treatment+Gap+Fenced)^2 + (1|Plot.Number) + (1|Species.Name), data=df_LF_new)
m3 <- lmer(log(X3)~ (log(X0)+Treatment+Gap+Fenced)^2 + (1|Plot.Number) + (1|Species.Name), data=df_LF_new)
m4 <- get_model(step(m3))
summary(m4)
plott(m4)
plot(m4)
summary(m2)
