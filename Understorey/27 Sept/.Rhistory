levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 2, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 100, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 50, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 20, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 1-, cost = 0.3)
svmfit <- svm(X, Y, scale = FALSE, gamma = 10, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 9, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 8, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 5, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 4, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 3, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 2, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 1, cost = 0.3)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
svmfit <- svm(X, Y, scale = FALSE, gamma = 1, cost = 1.5)
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
plot_points <- function (svmfit) {
zpred <- matrix(attr(predict(svmfit, cbind(x, y), decision.values = TRUE),
"decision.values")[, 1], gnum, gnum)
mycontour <- contourLines(x = x1, y = y1, zpred, nlevels = 1,
levels = 0)
contour(x1, y1, z, nlevels = 1, levels = 0, xlim = c(-2, 3),
ylim = c(-2, 3), drawlabels = FALSE, lwd = 2, lty = 2, xaxt = "n",
yaxt = "n")
points(xx1[, 1], xx1[, 2], col = "dodgerblue3", pch = 19)
points(xx2[, 1], xx2[, 2], col = "forestgreen", pch = 22)
lines(mycontour[[1]]$x, mycontour[[1]]$y, lwd = 2, lty = 1,
col = "firebrick")
}
svmfit <- svm(X, Y, scale = FALSE, gamma = 1, cost = 1.5)
plot_points
plot_points(svmfit)
svmfit <- svm(X, Y, scale = FALSE, gamma = 2, cost = 1.5)
plot_points(svmfit)
svmfit <- svm(X, Y, scale = FALSE, gamma = 2, cost = 2)
plot_points(svmfit)
svmfit <- svm(X, Y, scale = FALSE, gamma = 2, cost = 0.75)
plot_points(svmfit)
svmfit <- svm(X, Y, scale = FALSE, gamma = 3, cost = 0.75)
plot_points(svmfit)
svmfit <- svm(X, Y, scale = FALSE, gamma = 1.5, cost = 0.75)
svmfit <- svm(X, Y, scale = FALSE, gamma = 1.5, cost = 0.75)
plot_points(svmfit)
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 0.75))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 1x))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 1))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 100))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 1000))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 500))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 300))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 200))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 100))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 110))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 110))
plot_points(svm(X, Y, scale = FALSE, gamma = 1.5, cost = 120))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 120))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 200))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 150))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 200, probability=T))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 1000, probability=T))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 0.002))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 0.0001))
plot_points(svm(X, Y, scale = FALSE, gamma = 1, cost = 0.05))
plot_points(svm(X, Y, scale = FALSE,
kernel='polynomial', degree=4, coef0=0.2,
gamma = 1, cost = 0.05))
plot_points(svm(X, Y, scale = FALSE,
kernel='polynomial', degree=4, coef0=0.2,
gamma = 1, cost = 10))
plot_points(svm(X, Y, scale = FALSE,
kernel='polynomial', degree=4, coef=0.2,
gamma = 1, cost = 10))
plot_points(svm(X, Y, scale = FALSE,
kernel='polynomial', degree=6, coef=0.2,
gamma = 1, cost = 10))
?seqe
?seq
output = tune.svm(X, Y, scale=F,
gamma=seq(0.001,100, length.out=50),
cost=seq(0.001,100, length.out=50))
output = tune.svm(X, Y, scale=F,
gamma=seq(0.001,100, length.out=5),
cost=seq(0.001,100, length.out=5))
output
plot_points(svm(X, Y, scale = FALSE,
gamma = 0.001, cost = 75))
plot_points(svm(X, Y, scale = FALSE,
tunecontrol=c(gamma = 0.001, cost = 75)))
output = tune.svm(X, Y, scale=F,
tunecontrol=c(gamma=seq(0.001,100, length.out=5),
cost=seq(0.001,100, length.out=5)))
output = tune.svm(X, Y, scale=F,
gamma=10^(1:3),
cost=10^(1:3))
output$best.parameters
tunecontrol=c(gamma = 10, cost = 10))
plot_points(svm(X, Y, scale = FALSE,
gamma = 10, cost = 10))
plot_points(svm(X, Y, scale = FALSE,
gamma = 1, cost = 10))
plot_points(svm(X, Y, scale = FALSE,
gamma = 1, cost = 1.5))
plot_points(svm(X, Y, scale = FALSE,
gamma = 1.5, cost = 1.5))
plot_points(svm(X, Y, scale = FALSE,
gamma = 1.5, cost = 1))
G_train_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtrainRain.txt'
G_test_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtestRain.txt'
train <- read.table(G_train_path, sep=',', header=T)
test <- read.table(G_test_path, sep=',', header=T)
train_X <- train[,1:365]
train_G <- train[,366]
test_X <- test[,1:365]
test_G <- test[,366]
qda_classifier <- qda(train_G~., data=train)
logistic_classifier <- glm(train_G ~ ., family='binomial', data=train)
summary(logistic_classifier)
X <- scale(train_X, scale=F)
pca <- prcomp(train_X)
Gamma <- pca$rotation
PComps <- t(t(Gamma)%*%t(X)) # Principal Components
pls_results <- plsr(train_G ~ ., data=data.frame(train_X))
library(pls)
pls_results <- plsr(train_G ~ ., data=data.frame(train_X))
Phi <- pls_results$projection
PLComps <- t(t(Phi)%*%t(X)) # Partial Least Squares Components
PLComps ==pls_results$projection
pls_results$projection
PLComps ==pls_results$scores
sum(PLComps!=pls_results$scores)
sum(PLComps!=pls_results$scores)
pls_results$projection
sum(PLComps!=pls_results$scores)
pls_results$scores
n <- length(train_G)
CV_PLS <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- qda(train_G~., data=PL[-i,])
p <- predict(q, PL[i,])$class
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
library(pls)
G_train_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtrainRain.txt'
G_test_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtestRain.txt'
train <- read.table(G_train_path, sep=',', header=T)
test <- read.table(G_test_path, sep=',', header=T)
train_X <- train[,1:365]
train_G <- train[,366]
test_X <- test[,1:365]
test_G <- test[,366]
qda_classifier <- qda(train_G~., data=train)
X <- scale(train_X, scale=F)
pca <- prcomp(train_X)
Gamma <- pca$rotation
PComps <- t(t(Gamma)%*%t(X)) # Principal Components
pls_results <- plsr(train_G ~ ., data=data.frame(train_X))
Phi <- pls_results$projection
PLComps <- t(t(Phi)%*%t(X)) # Partial Least Squares Components
sum(PLComps!=pls_results$scores)
n <- length(train_G)
CV_PLS <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- qda(train_G~., data=PL[-i,])
p <- predict(q, PL[i,])$class
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
library(MASS)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- qda(train_G~., data=PL[-i,])
p <- predict(q, PL[i,])$class
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
CV_PLS <- CV_PLS/n
which.min(CV_PLS)
plot(CV_PLS, type='l')
PLComps_CV <- data.frame(PLComps[,1:which.min(CV_PLS)])
View(PLComps_CV)
PLComps_CV <- data.frame(PLComps[,1:which.min(CV_PLS)])
PLS_qda <- qda(train_G~., data=PLComps_CV)
G_train_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtrainRain.txt'
G_test_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtestRain.txt'
train <- read.table(G_train_path, sep=',', header=T)
test <- read.table(G_test_path, sep=',', header=T)
train_X <- train[,1:365]
train_G <- train[,366]
test_X <- test[,1:365]
test_G <- test[,366]
qda_classifier <- qda(train_G~., data=train)
logistic_classifier <- glm(train_G ~ ., family='binomial', data=train)
X <- scale(train_X, scale=F)
pca <- prcomp(train_X)
Gamma <- pca$rotation
PComps <- t(t(Gamma)%*%t(X)) # Principal Components
pls_results <- plsr(train_G ~ ., data=data.frame(train_X))
Phi <- pls_results$projection
PLComps <- t(t(Phi)%*%t(X)) # Partial Least Squares Components
sum(PLComps!=pls_results$scores)
n <- length(train_G)
CV_PLS <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- qda(train_G~., data=PL[-i,])
p <- predict(q, PL[i,])$class
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
CV_PLS <- CV_PLS/n
CV_PLS
which.min(CV_PLS)
plot(CV_PLS, type='l')
PLComps_CV <- data.frame(PLComps[,1:which.min(CV_PLS)])
PLS_qda <- qda(train_G~., data=PLComps_CV)
summary(PLS_qda)
CV_PLS <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- glm(train_G~., family='binomial', data=PL[-i,])
p <- round(predict(q, PL[i,], type='response'))
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
CV_PLS <- CV_PLS/n
which.min(CV_PLS)
plot(CV_PLS, type='l')
PLComps_CV <- data.frame(PLComps[,1:which.min(CV_PLS)])
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV)
summary(PLS_logistic)
PLS_logistic <- glm(factor(train_G)~., family='binomial', data=PLComps_CV)
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV)
summary(PLS_logistic)
View(PLComps_CV)
View(PLS_logistic)
?glm
glm.control(maxit=100)
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV)
glm.control()
glm.control <- glm.control(maxit=100)
glm.control()
glm.control$maxit <- 100
glm.control()
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV,
control=glm.control(maxit=100))
summary(PLS_logistic)
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV)
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV,
control=glm.control(maxit=100))
library(rstudioapi)
library(lme4)
library(lmerTest)
library(merTools)
setwd(dirname(getActiveDocumentContext()$path))
df <- read.csv('../dataset/tables/abundance_species_for_analysis.csv')
unique(df['Life.Form'])
colnames(df)
#grouped <- aggregate(cbind(df$X0,df$X3,df$X6),
#                     list(df$Life.Form), FUN=sum)
#grouped <- grouped[order(grouped$V1, decreasing=T),]
#rownames(grouped) <- grouped$Group.1
df$Plot.Number <- factor(df$Plot.Number)
df$Treatment <- factor(df$Treatment)
df$Fenced <- df$Fenced=="True"
df$Gap <- df$Gap=="True"
# Remove rows with all abundance = 0
df <- df[!(df$X0 == 0 & df$X3 == 0 & df$X6 == 0),]
df_Y0 <- df[,c(1:7,8)]
df_Y0 <- cbind(df_Y0, 0)
colnames(df_Y0)[8:9] <- c("X", 'Year')
df_Y3 <- df[,c(1:7,9)]
df_Y3 <- cbind(df_Y3, 3)
colnames(df_Y3)[8:9] <- c("X", 'Year')
df_Y6 <- df[,c(1:7,10)]
df_Y6 <- cbind(df_Y6, 6)
colnames(df_Y6)[8:9] <- c("X", 'Year')
df_prime <- rbind(df_Y0,df_Y3,df_Y6)
df_prime$Year2 <- df_prime$Year^2
df_prime$log_X <- df_prime$X
df_prime[df_prime$X==0, 'log_X'] <- 0.1
df_prime$log_X <- log(df_prime$log_X)
# LF = Large Forb/herb
df_LF <- df_prime[df_prime$Life.Form=="Large Forb/Herb",]
LF_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1+ Treatment + Gap + Fenced |Species.Name), data=df_LF)
LF_m4 <- get_model(step(LF_m3))
summary(LF_m4)
plot(LF_m4)
RSS <- sum((df_LF$log_X - fitted(LF_m4, df_LF))^2)
# Exclude rows where abundance = 0
df_LF <- df_LF[df_LF$log_X >= 0,]
LF_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1+ Treatment + Gap + Fenced |Species.Name), data=df_LF)
LF_m4 <- get_model(step(LF_m3))
summary(LF_m4)
plot(LF_m4)
RSS <- sum((df_LF$log_X - fitted(LF_m4, df_LF))^2)
TSS <- sum((df_LF$log_X - mean(df_LF$log_X))^2)
R2 <- 1-RSS/TSS
R2
# MTG = Medium Tufted Grass
df_MTG <- df_prime[df_prime$Life.Form=="Medium Tufted grass/sedge",]
MTG_m1 <- lmer(X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_MTG)
MTG_m2 <- get_model(step(MTG_m1))
summary(MTG_m2)
plot(MTG_m2)
# Exclude rows where abundance = 0
df_MTG <- df_MTG[df_MTG$log_X >= 0,]
summary(LF_m4)
# MTG = Medium Tufted Grass
df_MTG <- df_prime[df_prime$Life.Form=="Medium Tufted grass/sedge",]
MTG_m1 <- lmer(X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_MTG)
MTG_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1+ Treatment + Gap + Fenced |Species.Name), data=df_MTG)
# Exclude rows where abundance = 0
df_MTG <- df_MTG[df_MTG$log_X >= 0,]
MTG_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1+ Treatment + Gap + Fenced |Species.Name), data=df_MTG)
MTG_m4 <- get_model(step(MTG_m3))
summary(MTG_m4)
plot(MTG_m4)
RSS <- sum((df_MTG$log_X - fitted(MTG_m4, df_MTG))^2)
TSS <- sum((df_MTG$log_X - mean(df_MTG$log_X))^2)
R2 <- 1-RSS/TSS
R2
# MNTG = Medium Non-Tufted Grass
df_MNTG <- df_prime[df_prime$Life.Form=="Medium Non-tufted grass/sedge",]
MNTG_m1 <- lmer(X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1|Species.Name), data=df_MNTG)
MNTG_m2 <- get_model(step(MNTG_m1))
summary(MNTG_m2)
plot(MNTG_m2)
# Exclude rows where abundance = 0
df_MNTG <- df_MNTG[df_MNTG$log_X >= 0,]
MNTG_m3 <- lmer(log_X ~ (Treatment + Year + Year2 + Gap + Fenced)^2 +
(1|Plot.Number) + (1+ Treatment + Gap + Fenced |Species.Name), data=df_MNTG)
MNTG_m4 <- get_model(step(MNTG_m3))
summary(MNTG_m4)
plot(MNTG_m4)
RSS <- sum((df_MNTG$log_X - fitted(MNTG_m4, df_MNTG))^2)
TSS <- sum((df_MNTG$log_X - mean(df_MNTG$log_X))^2)
R2 <- 1-RSS/TSS
R2
