library(MASS)
qda_classifier <- qda(train_G~., data=train)
logistic_classifier <- glm(train_G ~ ., family='binomial', data=train)
summary(logistic)
summary(logistic_classifier)
X <- scale(train_X, scale=F)
pca <- prcomp(train_X)
Gamma <- pca$rotation
PComps <- t(t(Gamma)%*%t(X))
pls_results <- plsr(train_G ~ ., data=data.frame(train_X))
Phi <- pls_results$projection
PLComps <- t(t(Phi)%*%t(X))
n <- length(test_G)
CV_PLS <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- qda(train_G~., data=PL[-i,])
p <- predict(q, PL[i,])$class
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
PLComps <- t(t(Phi)%*%t(X))
Phi <- pls_results$projection
pls_results <- plsr(train_G ~ ., data=data.frame(train_X))
library(pls)
pls_results <- plsr(train_G ~ ., data=data.frame(train_X))
Phi <- pls_results$projection
PLComps <- t(t(Phi)%*%t(X))
n <- length(test_G)
CV_PLS <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- qda(train_G~., data=PL[-i,])
p <- predict(q, PL[i,])$class
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
CV_PLS <- CV_PLS/n
CV_PLS
which.min(CV_PLS)
PLComps_CV <- PLComps[,1:which.min(CV_PLS)]
PLS_qda <- qda(train_G~., data=PLComps_CV)
plot(CV_PLS)
plot(CV_PLS, type='l')
PLComps_CV <- PLComps[,1:which.min(CV_PLS)]
PLS_qda <- qda(train_G~., data=PLComps_CV)
PLComps_CV <- data.frame(PLComps[,1:which.min(CV_PLS)])
PLComps_CV
PLS_qda <- qda(train_G~., data=PLComps_CV)
CV_PC <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PComps[,1:k]))
for (i in 1:n) {
q <- qda(train_G~., data=PL[-i,])
p <- predict(q, PL[i,])$class
if (p != PL[i,]$train_G) {
CV_PC[k] <- CV_PC[k] +1
}
}
}
CV_PC <- CV_PC/n
CV_PC
which.min(CV_PC)
plot(CV_PC, type='l')
PComps_CV <- PComps[,1:which.min(CV_PC)]
PC_qda <- qda(train_G~., data=PComps_CV)
PComps_CV <- data.frame(PComps[,1:which.min(CV_PC)])
PComps_CV
PC_qda <- qda(train_G~., data=PComps_CV)
CV_PLS <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- glm(train_G~., family='binomial', data=PL[-i,])
p <- round(predict(q, PL[i,], type='response'))
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
CV_PLS <- CV_PLS/n
CV_PLS
which.min(CV_PLS)
plot(CV_PLS, type='l')
PLComps_CV <- PLComps[,1:which.min(CV_PLS)]
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV)
PLComps_CV <- data.frame(PLComps[,1:which.min(CV_PLS)])
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV)
CV_PC <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PComps[,1:k]))
for (i in 1:n) {
q <- glm(train_G~., family='binomial', data=PL[-i,])
p <- round(predict(q, PL[i,], type='response'))
if (p != PL[i,]$train_G) {
CV_PC[k] <- CV_PC[k] +1
}
}
}
CV_PC <- CV_PC/n
CV_PC
which.min(CV_PC)
plot(CV_PC, type='l')
PComps_CV <- data.frame(PComps[,1:which.min(CV_PC)])
PC_logistic <- glm(train_G~., family='binomial', data=PComps_CV)
G_train_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtrainRain.txt'
G_test_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtestRain.txt'
train <- read.table(G_train_path, sep=',', header=T)
test <- read.table(G_test_path, sep=',', header=T)
train_X <- train[,1:365]
train_G <- train[,366]
test_X <- test[,1:365]
test_G <- test[,366]
# Quadratic Discriminant
library(MASS)
library(pls)
qda_classifier <- qda(train_G~., data=train)
logistic_classifier <- glm(train_G ~ ., family='binomial', data=train)
summary(logistic_classifier)
X <- scale(train_X, scale=F)
pca <- prcomp(train_X)
Gamma <- pca$rotation
PComps <- t(t(Gamma)%*%t(X))
pls_results <- plsr(train_G ~ ., data=data.frame(train_X))
Phi <- pls_results$projection
PLComps <- t(t(Phi)%*%t(X))
n <- length(test_G)
CV_PLS <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- qda(train_G~., data=PL[-i,])
p <- predict(q, PL[i,])$class
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
CV_PLS <- CV_PLS/n
CV_PLS
which.min(CV_PLS)
plot(CV_PLS, type='l')
PLComps_CV <- data.frame(PLComps[,1:which.min(CV_PLS)])
PLS_qda <- qda(train_G~., data=PLComps_CV)
CV_PC <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PComps[,1:k]))
for (i in 1:n) {
q <- qda(train_G~., data=PL[-i,])
p <- predict(q, PL[i,])$class
if (p != PL[i,]$train_G) {
CV_PC[k] <- CV_PC[k] +1
}
}
}
CV_PC <- CV_PC/n
CV_PC
which.min(CV_PC)
plot(CV_PC, type='l')
PComps_CV <- data.frame(PComps[,1:which.min(CV_PC)])
PC_qda <- qda(train_G~., data=PComps_CV)
CV_PLS <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- glm(train_G~., family='binomial', data=PL[-i,])
p <- round(predict(q, PL[i,], type='response'))
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
q <- glm(train_G~., family='binomial', data=PL[-i,])
p <- round(predict(q, PL[i,], type='response'))
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PLComps[,1:k]))
for (i in 1:n) {
q <- glm(train_G~., family='binomial', data=PL[-i,])
p <- round(predict(q, PL[i,], type='response'))
if (p != PL[i,]$train_G) {
CV_PLS[k] <- CV_PLS[k] +1
}
}
}
CV_PLS <- CV_PLS/n
CV_PLS
which.min(CV_PLS)
plot(CV_PLS, type='l')
PLComps_CV <- data.frame(PLComps[,1:which.min(CV_PLS)])
PLS_logistic <- glm(train_G~., family='binomial', data=PLComps_CV)
CV_PC <- rep(0,50)
for (k in 1:50) {
PL <- data.frame(cbind(train_G, PComps[,1:k]))
for (i in 1:n) {
q <- glm(train_G~., family='binomial', data=PL[-i,])
p <- round(predict(q, PL[i,], type='response'))
if (p != PL[i,]$train_G) {
CV_PC[k] <- CV_PC[k] +1
}
}
}
CV_PC <- CV_PC/n
CV_PC
which.min(CV_PC)
plot(CV_PC, type='l')
PComps_CV <- data.frame(PComps[,1:which.min(CV_PC)])
PC_logistic <- glm(train_G~., family='binomial', data=PComps_CV)
test_X
offset <- matrix(rep(colMeans(train_X), ncol=length(test_X[,1]), byrow=T))
test_X - offset
offset <- matrix(rep(colMeans(train_X), ncol=length(train_X[,1]), byrow=T))
X == train_X-offset
X
offset <- matrix(rep(colMeans(train_X), ncol=length(train_X[,1]), byrow=T))
offset
View(offset)
offset <- matrix(rep(colMeans(train_X), length(train_X[1,]),
ncol=length(train_X[,1]), byrow=T))
X == train_X-offset
offset <- matrix(rep(colMeans(train_X), length(train_X[1,]),
ncol=length(train_X[,1]), byrow=T))
View(offset)
offset <- matrix(rep(colMeans(train_X), length(train_X[1,]),
nrow=length(train_X[1,]), byrow=T))
View(offset)
offset <- 0
offset <- matrix(rep(colMeans(train_X), length(train_X[1,]),
nrow=length(train_X[1,]), byrow=T))
colMeans(train_X)
length(test_X[,1])
for (i in 1:length(test_X[,1])) {
test_X <- test_X - colMeans(train_X)
}
test_X
train <- read.table(G_train_path, sep=',', header=T)
test <- read.table(G_test_path, sep=',', header=T)
train_X <- train[,1:365]
train_G <- train[,366]
test_X <- test[,1:365]
test_G <- test[,366]
for (i in 1:length(test_X[,1])) {
test_X <- test_X - colMeans(train_X)
}
test_X
test_X - offset
colMeans(train_X)
test_X <- test[,1:365]
test_X
test_X[1,]
test_X[1,]-colMeans(train_X)
test_X[1,1]-colMeans(train_X[1])
for (i in 1:length(test_X[,1])) {
test_X[i,] <- test_X[i,] - colMeans(train_X)
}
test_X
test_X_Centered <- test_X
test <- read.table(G_test_path, sep=',', header=T)
train_X <- train[,1:365]
train_G <- train[,366]
test_X <- test[,1:365]
test_G <- test[,366]
test_X_Centered <- test_X
for (i in 1:length(test_X[,1])) {
test_X_Centered[i,] <- test_X[i,] - colMeans(train_X)
}
test_X[1,]
test_X_Centered[1,]
PComps_test <- t(t(Gamma)%*%t(test_X_Centered))
PLComps_test <- t(t(Phi)%*%t(test_X_Centered))
PComps_test <- cbind(test_G, PComps_test)
PComps_test <- t(t(Gamma)%*%t(test_X_Centered))
PComps_test <- data.frame(cbind(test_G, PComps_test))
PLComps_test <- t(t(Phi)%*%t(test_X_Centered))
PLComps_test <- data.frame(cbind(test_G, PLComps_test))
predict(PLS_qda, PLComps_test)
predict(PLS_qda, PLComps_test)$class
predict(PLS_qda, PLComps_test)$class == test_G
# qda with Principal Components
predict(PC_qda, PComps_test)$class == test_G
# logistic classifier with Partial Least Square Components
round(predict(PLS_logistic, PLComps_test, type='response'))
# logistic classifier with Partial Least Square Components
round(predict(PLS_logistic, PLComps_test, type='response')) == test_G
# Logistic classifier with Principal Components
round(predict(PC_logistic, PComps_test, type='response')) == test_G
# Logistic classifier with Partial Least Square Components
sum(round(predict(PLS_logistic, PLComps_test, type='response')) == test_G)/length(test_G)
# qda with Partial Least Square Components
sum(predict(PLS_qda, PLComps_test)$class != test_G)/length(test_G)
# qda with Principal Components
sum(predict(PC_qda, PComps_test)$class != test_G)/length(test_G)
# Logistic classifier with Partial Least Square Components
sum(round(predict(PLS_logistic, PLComps_test, type='response')) != test_G)/length(test_G)
# Logistic classifier with Principal Components
sum(round(predict(PC_logistic, PComps_test, type='response')) != test_G)/length(test_G)
# Question 2
?randomForest
library(randomForest)
# Question 2
?randomForest
View(PLComps)
randomForest(train_G~., data=train)
train
data.frame(train)
train$G
train$G <- factor(train$G)
randomForest(train_G~., data=train)
randomForest(G~., data=train)
library(MASS)
library(pls)
library(randomForest)
G_train_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtrainRain.txt'
G_test_path <- '/Users/nickjolly/Documents/2022:23/Unimelb/MV Stats (MAST90138)/04 Assignments/03/XGtestRain.txt'
train <- read.table(G_train_path, sep=',', header=T)
test <- read.table(G_test_path, sep=',', header=T)
train_X <- train[,1:365]
train_G <- train[,366]
test_X <- test[,1:365]
test_G <- test[,366]
train$G <- factor(train$G)
rf <- randomForest(G~., data=train)
predict(rf)
test$G <- factor(test$G)
predict(rf, test)
predict(rf, test) == test$G
rf$err.rate
rf <- randomForest(G~., data=train, ntree=3000)
predict(rf, test) == test$G
rf$err.rate
plot(rf$err.rate[1,])
plot(rf$err.rate[,1], type='l')
which.min(rf$err.rate[,1])
rf <- randomForest(G~., data=train, ntree=which.min(rf$err.rate[,1]))
importance(rf)
?importance
importance(rf, type=1)
importance(rf, type=2)
importance(rf)
plot(importance(rf, type=2))
plot(importance(rf, type=2), type='l')
importance(rf, type=2)
predict(rf, test) == test$G
predict(rf, test) == test$G
predict(rf, test) == test$G
predict(rf, test) == test$G
predict(rf, test) == test$G
predict(rf, test) == test$G
) ==
predict(rf, test) == test$G
predict(rf, test) == test$G
predict(rf, test) == test$G
library(rstudioapi)
library(pROC)
library(lme4)
setwd(dirname(getActiveDocumentContext()$path))
richness_df <- read.csv('../dataset/tables/species_richness_quadrats.csv')
richness_df_plot <- read.csv('../contingency tables/output/richness/species_richness_plots.csv')
# Treatments, Plot numbers, Quadrat numbers, Life forms as factors
richness_df$Treatment <- factor(richness_df$Treatment)
richness_df$Plot.Number <- factor(richness_df$Plot.Number)
richness_df$Quadrat.Number <- factor(richness_df$Quadrat.Number)
# Convert Fenced, Gap columns to boolean
richness_df$Gap <- richness_df$Gap=='True'
richness_df$Fenced <- richness_df$Fenced=='True'
richness_df_plot$Gap <- richness_df_plot$Gap=='True'
richness_df_plot$Fenced <- richness_df_plot$Fenced=='True'
# Remove null rows
richness_df <- na.omit(richness_df)
richness_df_plot <- na.omit(richness_df_plot)
richness_df
richness_df$X0
mean(richness_df$X0
)
var(richness_df$X0)
mean(richness_df$X3)
var(richness_df$X3)
mean(richness_df$X6)
var(richness_df$X6)
richness_df
richness_0 <- cbind(richness_df[1:5],richness_df[6])
richness_0['Year']=0
names(richness_0) <- c("Treatment", "Plot.Number", 'Quadrat.Number', "Fenced", "Gap", "X", 'Year')
richness_3 <- cbind(richness_df[1:5],richness_df[7])
richness_3['Year'] <- 3
names(richness_3) <- c("Treatment", "Plot.Number", 'Quadrat.Number', "Fenced", "Gap", "X", 'Year')
richness_6 <- cbind(richness_df[1:5],richness_df[8])
richness_6['Year'] <- 6
names(richness_6) <- c("Treatment", "Plot.Number", 'Quadrat.Number', "Fenced", "Gap", "X", 'Year')
richness <- rbind(richness_0, richness_3, richness_6)
richness
mean(c(richness_df$X0,richness_df$X3,richness_df$X6))
apply((c(richness_df$X0,richness_df$X3,richness_df$X6), mean)
lapply((c(richness_df$X0,richness_df$X3,richness_df$X6), mean)
lapply(c(richness_df$X0,richness_df$X3,richness_df$X6), mean)
apply(c(richness_df$X0,richness_df$X3,richness_df$X6), mean)
c(mean(richness_df$X0), var(richness_df$X0))
c(mean(richness_df$X3), var(richness_df$X3))
c(mean(richness_df$X6), var(richness_df$X6))
model1 <- glm(X ~ (Treatment + Fenced + Gap + Year)^2, data=richness)
model2 <- step(model1)
summary(model2)
plot(model2)
model1 <- glmm(X ~ (Treatment + Fenced + Gap + Year)^2 +
(1|Plot.number), data=richness)
model1 <- lmer(X ~ (Treatment + Fenced + Gap + Year)^2 +
(1|Plot.number), data=richness)
richness
model1 <- lmer(X ~ (Treatment + Fenced + Gap + Year)^2 +
(1|Plot.Number), data=richness)
model2 <- step(model1)
summary(model2)
plot(model2)
library(lmerTest)
model2 <- step(model1)
model1 <- lmer(X ~ (Treatment + Fenced + Gap + Year)^2 +
(1|Plot.Number), data=richness)
model2 <- step(model1)
summary(model2)
plot(model2)
model2 <- get_model(step(model1))
summary(model2)
plot(model2)
ranova(model2)
fitted(model2, richness)
RSS <- sum((richness$X0 - fitted(model2, richness))^2)
TSS <- sum((richness$X0 - mean(richness$X0))^2)
TSS <- sum((richness$X0 - mean(richness$X0))^2)
mean(richness$X0)
richness$X0
RSS <- sum((richness$X - fitted(model2, richness))^2)
TSS <- sum((richness$X - mean(richness$X))^2)
R2 <- 1-RSS/TSS
R2
source("~/Desktop/tfn/DataScienceProject/Understorey/27 Sept/richness 27 Sept.R", echo=TRUE)
richness$Year2 <- richness$Year^2
model1 <- lmer(X ~ (Treatment + Fenced + Gap + Year + Year2)^2 +
(1|Plot.Number), data=richness)
model2 <- get_model(step(model1))
summary(model2)
ranova(model2)
RSS <- sum((richness$X - fitted(model2, richness))^2)
TSS <- sum((richness$X - mean(richness$X))^2)
R2 <- 1-RSS/TSS
R2
plot(model2)
diversity_df
diversity_0 <- cbind(diversity_df[1:5],diversity_df[6])
diversity_0['Year']=0
names(diversity_0) <- c("Treatment", "Plot.Number", 'Quadrat.Number', "Fenced", "Gap", "X", 'Year')
diversity_3 <- cbind(diversity_df[1:5],diversity_df[7])
diversity_3['Year'] <- 3
names(diversity_3) <- c("Treatment", "Plot.Number", 'Quadrat.Number', "Fenced", "Gap", "X", 'Year')
diversity_6 <- cbind(diversity_df[1:5],diversity_df[8])
diversity_6['Year'] <- 6
names(diversity_6) <- c("Treatment", "Plot.Number", 'Quadrat.Number', "Fenced", "Gap", "X", 'Year')
diversity <- rbind(diversity_0, diversity_3, diversity_6)
library(rstudioapi)
library(pROC)
library(lme4)
setwd(dirname(getActiveDocumentContext()$path))
diversity_df <- read.csv('../dataset/tables/species_divers_quadrats.csv')
diversity_df_plot <- read.csv('../contingency tables/output/diversity/species_divers_plots.csv')
diversity_df_treat <- read.csv('../contingency tables/output/diversity/species_divers_treatments.csv')
# Treatments, Plot numbers, Quadrat numbers, Life forms as factors
diversity_df$Treatment <- factor(diversity_df$Treatment)
diversity_df$Plot.Number <- factor(diversity_df$Plot.Number)
diversity_df$Quadrat.Number <- factor(diversity_df$Quadrat.Number)
# Convert Fenced, Gap columns to boolean
diversity_df$Gap <- diversity_df$Gap=='True'
diversity_df$Fenced <- diversity_df$Fenced=='True'
diversity_df_plot$Gap <- diversity_df_plot$Gap=='True'
diversity_df_plot$Fenced <- diversity_df_plot$Fenced=='True'
# Remove null rows
diversity_df <- na.omit(diversity_df)
diversity_df_plot <- na.omit(diversity_df_plot)
diversity_df
diversity_0 <- cbind(diversity_df[1:5],diversity_df[6])
diversity_0['Year']=0
names(diversity_0) <- c("Treatment", "Plot.Number", 'Quadrat.Number', "Fenced", "Gap", "X", 'Year')
diversity_3 <- cbind(diversity_df[1:5],diversity_df[7])
diversity_3['Year'] <- 3
names(diversity_3) <- c("Treatment", "Plot.Number", 'Quadrat.Number', "Fenced", "Gap", "X", 'Year')
diversity_6 <- cbind(diversity_df[1:5],diversity_df[8])
diversity_6['Year'] <- 6
names(diversity_6) <- c("Treatment", "Plot.Number", 'Quadrat.Number', "Fenced", "Gap", "X", 'Year')
diversity <- rbind(diversity_0, diversity_3, diversity_6)
m1 <- glm(X ~ (Treatment + Fenced + Gap + Year)^2, data=diversity)
summary(m1)
m2 <- step(m1)
summary(m2)
plot(m2)
diversity$Year2 <- diversity$Year^2
library(lmerTest)
m1 <- lmer(X ~ (Treatment + Fenced + Gap + Year + Year2)^2, data=diversity)
m1 <- lmer(X ~ (Treatment + Fenced + Gap + Year + Year2)^2 +
(1|Plot.Number), data=diversity)
summary(m1)
m2 <- step(m1)
summary(m2)
m2 <- get_model(step(m1))
summary(m2)
plot(m2)
RSS <- sum((diversity$X - fitted(m2, diversity))^2)
TSS <- sum((diversity$X - mean(diversity$X))^2)
R2 <- 1-RSS/TSS
R2
